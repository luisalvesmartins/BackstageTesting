{"version":3,"file":"strategy.cjs.js","sources":["../src/strategy.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PassportProfile } from '@backstage/plugin-auth-node';\nimport { decodeJwt } from 'jose';\nimport fetch from 'node-fetch';\nimport { Strategy as MicrosoftStrategy } from 'passport-microsoft';\n\nexport class ExtendedMicrosoftStrategy extends MicrosoftStrategy {\n  private shouldSkipUserProfile = false;\n\n  public setSkipUserProfile(shouldSkipUserProfile: boolean): void {\n    this.shouldSkipUserProfile = shouldSkipUserProfile;\n  }\n\n  userProfile(\n    accessToken: string,\n    done: (err?: unknown, profile?: PassportProfile) => void,\n  ): void {\n    if (this.skipUserProfile(accessToken)) {\n      done(null, undefined);\n      return;\n    }\n\n    super.userProfile(\n      accessToken,\n      (err?: unknown, profile?: PassportProfile) => {\n        if (!profile || profile.photos) {\n          done(err, profile);\n          return;\n        }\n\n        this.getProfilePhotos(accessToken).then(photos => {\n          profile.photos = photos;\n          done(err, profile);\n        });\n      },\n    );\n  }\n\n  private hasGraphReadScope(accessToken: string): boolean {\n    const { aud, scp } = decodeJwt(accessToken);\n    return (\n      aud === '00000003-0000-0000-c000-000000000000' &&\n      !!scp &&\n      (scp as string)\n        .split(' ')\n        .map(s => s.toLocaleLowerCase('en-US'))\n        .some(s =>\n          [\n            'https://graph.microsoft.com/user.read',\n            'https://graph.microsoft.com/user.read.all',\n            'user.read',\n            'user.read.all',\n          ].includes(s),\n        )\n    );\n  }\n\n  private skipUserProfile(accessToken: string): boolean {\n    try {\n      return this.shouldSkipUserProfile || !this.hasGraphReadScope(accessToken);\n    } catch {\n      // If there is any error with checking the scope\n      // we fall back to not skipping the user profile\n      // which may still result in an auth failure\n      // e.g. due to a foreign scope.\n      return false;\n    }\n  }\n\n  private async getProfilePhotos(\n    accessToken: string,\n  ): Promise<Array<{ value: string }> | undefined> {\n    return this.getCurrentUserPhoto(accessToken, '96x96').then(photo =>\n      photo ? [{ value: photo }] : undefined,\n    );\n  }\n\n  private async getCurrentUserPhoto(\n    accessToken: string,\n    size: string,\n  ): Promise<string | undefined> {\n    try {\n      const res = await fetch(\n        `https://graph.microsoft.com/v1.0/me/photos/${size}/$value`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        },\n      );\n      const data = await res.buffer();\n\n      return `data:image/jpeg;base64,${data.toString('base64')}`;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n"],"names":["MicrosoftStrategy","decodeJwt","fetch"],"mappings":";;;;;;;;;;AAqBO,MAAM,kCAAkCA,0BAAkB,CAAA;AAAA,EACvD,qBAAwB,GAAA,KAAA,CAAA;AAAA,EAEzB,mBAAmB,qBAAsC,EAAA;AAC9D,IAAA,IAAA,CAAK,qBAAwB,GAAA,qBAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,WAAA,CACE,aACA,IACM,EAAA;AACN,IAAI,IAAA,IAAA,CAAK,eAAgB,CAAA,WAAW,CAAG,EAAA;AACrC,MAAA,IAAA,CAAK,MAAM,KAAS,CAAA,CAAA,CAAA;AACpB,MAAA,OAAA;AAAA,KACF;AAEA,IAAM,KAAA,CAAA,WAAA;AAAA,MACJ,WAAA;AAAA,MACA,CAAC,KAAe,OAA8B,KAAA;AAC5C,QAAI,IAAA,CAAC,OAAW,IAAA,OAAA,CAAQ,MAAQ,EAAA;AAC9B,UAAA,IAAA,CAAK,KAAK,OAAO,CAAA,CAAA;AACjB,UAAA,OAAA;AAAA,SACF;AAEA,QAAA,IAAA,CAAK,gBAAiB,CAAA,WAAW,CAAE,CAAA,IAAA,CAAK,CAAU,MAAA,KAAA;AAChD,UAAA,OAAA,CAAQ,MAAS,GAAA,MAAA,CAAA;AACjB,UAAA,IAAA,CAAK,KAAK,OAAO,CAAA,CAAA;AAAA,SAClB,CAAA,CAAA;AAAA,OACH;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEQ,kBAAkB,WAA8B,EAAA;AACtD,IAAA,MAAM,EAAE,GAAA,EAAK,GAAI,EAAA,GAAIC,eAAU,WAAW,CAAA,CAAA;AAC1C,IAAA,OACE,GAAQ,KAAA,sCAAA,IACR,CAAC,CAAC,OACD,GACE,CAAA,KAAA,CAAM,GAAG,CAAA,CACT,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,iBAAkB,CAAA,OAAO,CAAC,CACrC,CAAA,IAAA;AAAA,MAAK,CACJ,CAAA,KAAA;AAAA,QACE,uCAAA;AAAA,QACA,2CAAA;AAAA,QACA,WAAA;AAAA,QACA,eAAA;AAAA,OACF,CAAE,SAAS,CAAC,CAAA;AAAA,KACd,CAAA;AAAA,GAEN;AAAA,EAEQ,gBAAgB,WAA8B,EAAA;AACpD,IAAI,IAAA;AACF,MAAA,OAAO,IAAK,CAAA,qBAAA,IAAyB,CAAC,IAAA,CAAK,kBAAkB,WAAW,CAAA,CAAA;AAAA,KAClE,CAAA,MAAA;AAKN,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAAA,GACF;AAAA,EAEA,MAAc,iBACZ,WAC+C,EAAA;AAC/C,IAAA,OAAO,IAAK,CAAA,mBAAA,CAAoB,WAAa,EAAA,OAAO,CAAE,CAAA,IAAA;AAAA,MAAK,WACzD,KAAQ,GAAA,CAAC,EAAE,KAAO,EAAA,KAAA,EAAO,CAAI,GAAA,KAAA,CAAA;AAAA,KAC/B,CAAA;AAAA,GACF;AAAA,EAEA,MAAc,mBACZ,CAAA,WAAA,EACA,IAC6B,EAAA;AAC7B,IAAI,IAAA;AACF,MAAA,MAAM,MAAM,MAAMC,sBAAA;AAAA,QAChB,8CAA8C,IAAI,CAAA,OAAA,CAAA;AAAA,QAClD;AAAA,UACE,OAAS,EAAA;AAAA,YACP,aAAA,EAAe,UAAU,WAAW,CAAA,CAAA;AAAA,WACtC;AAAA,SACF;AAAA,OACF,CAAA;AACA,MAAM,MAAA,IAAA,GAAO,MAAM,GAAA,CAAI,MAAO,EAAA,CAAA;AAE9B,MAAA,OAAO,CAA0B,uBAAA,EAAA,IAAA,CAAK,QAAS,CAAA,QAAQ,CAAC,CAAA,CAAA,CAAA;AAAA,aACjD,KAAO,EAAA;AACd,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AAAA,GACF;AACF;;;;"}