{"version":3,"file":"createAsyncValidators.esm.js","sources":["../../../../src/next/components/Stepper/createAsyncValidators.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldValidation } from '@rjsf/utils';\nimport type { JsonObject, JsonValue } from '@backstage/types';\nimport { ApiHolder } from '@backstage/core-plugin-api';\nimport {\n  Draft07 as JSONSchema,\n  JsonError,\n  JsonSchema,\n} from 'json-schema-library';\nimport { createFieldValidation, extractSchemaFromStep } from '../../lib';\nimport {\n  CustomFieldValidator,\n  FieldExtensionUiSchema,\n} from '@backstage/plugin-scaffolder-react';\nimport { isObject } from './utils';\n\n/** @alpha */\nexport type FormValidation = {\n  [name: string]: FieldValidation | FormValidation;\n};\n\nconst isJsonError = (\n  value: JsonError | JsonSchema,\n): value is { type: 'error'; message: string } =>\n  'type' in value && value.type === 'error';\n\n/** @alpha */\nexport const createAsyncValidators = (\n  rootSchema: JsonObject,\n  validators: Record<\n    string,\n    undefined | CustomFieldValidator<unknown, unknown>\n  >,\n  context: {\n    apiHolder: ApiHolder;\n  },\n) => {\n  async function validate(\n    formData: JsonObject,\n    pathPrefix: string = '#',\n    current: JsonObject = formData,\n  ): Promise<FormValidation> {\n    const parsedSchema = new JSONSchema(rootSchema);\n    const formValidation: FormValidation = {};\n\n    const validateForm = async (\n      validatorName: string,\n      key: string,\n      value: JsonValue | undefined,\n      schema: JsonObject,\n      uiSchema: FieldExtensionUiSchema<unknown, unknown>,\n    ) => {\n      const validator = validators[validatorName];\n      if (validator) {\n        const fieldValidation = createFieldValidation();\n        try {\n          await validator(value, fieldValidation, {\n            ...context,\n            formData,\n            schema,\n            uiSchema,\n          });\n        } catch (ex) {\n          fieldValidation.addError(ex.message);\n        }\n        formValidation[key] = fieldValidation;\n      }\n    };\n\n    for (const [key, value] of Object.entries(current)) {\n      const pointer = `${pathPrefix}/${key}`;\n      const definitionInSchema = parsedSchema.getSchema({\n        pointer,\n        data: formData,\n      });\n\n      if (!definitionInSchema) {\n        continue;\n      }\n\n      if (isJsonError(definitionInSchema)) {\n        throw new Error(definitionInSchema.message);\n      }\n\n      const { schema, uiSchema } = extractSchemaFromStep(\n        definitionInSchema as JsonObject,\n      );\n\n      const hasItems = definitionInSchema && definitionInSchema.items;\n\n      const doValidateItem = async (\n        propValue: JsonObject,\n        itemSchema: JsonObject,\n        itemUiSchema: FieldExtensionUiSchema<unknown, unknown>,\n      ) => {\n        await validateForm(\n          propValue['ui:field'] as string,\n          key,\n          value,\n          itemSchema,\n          itemUiSchema,\n        );\n      };\n\n      const doValidate = async (propValue: JsonObject) => {\n        if ('ui:field' in propValue) {\n          const { schema: itemsSchema, uiSchema: itemsUiSchema } =\n            extractSchemaFromStep(definitionInSchema.items);\n          await doValidateItem(propValue, itemsSchema, itemsUiSchema);\n        }\n      };\n\n      if ('ui:field' in definitionInSchema) {\n        await doValidateItem(definitionInSchema, schema, uiSchema);\n      } else if (hasItems && 'ui:field' in definitionInSchema.items) {\n        await doValidate(definitionInSchema.items);\n      } else if (hasItems && definitionInSchema.items.type === 'object') {\n        const properties = (definitionInSchema.items?.properties ??\n          []) as JsonObject[];\n        for (const [, propValue] of Object.entries(properties)) {\n          await doValidate(propValue);\n        }\n      } else if (isObject(value)) {\n        formValidation[key] = await validate(formData, pointer, value);\n      }\n    }\n\n    return formValidation;\n  }\n\n  return async (formData: JsonObject) => {\n    return await validate(formData);\n  };\n};\n"],"names":["JSONSchema"],"mappings":"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"}