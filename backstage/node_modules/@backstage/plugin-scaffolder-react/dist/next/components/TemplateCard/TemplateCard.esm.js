import { RELATION_OWNED_BY } from '@backstage/catalog-model';
import { MarkdownContent, UserIcon } from '@backstage/core-components';
import { useAnalytics, useApp } from '@backstage/core-plugin-api';
import { getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import Box from '@material-ui/core/Box';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Chip from '@material-ui/core/Chip';
import Divider from '@material-ui/core/Divider';
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import LanguageIcon from '@material-ui/icons/Language';
import React, { useCallback } from 'react';
import { CardHeader } from './CardHeader.esm.js';
import { CardLink } from './CardLink.esm.js';
import { usePermission } from '@backstage/plugin-permission-react';
import { taskCreatePermission } from '@backstage/plugin-scaffolder-common/alpha';

const useStyles = makeStyles((theme) => ({
  box: {
    overflow: "hidden",
    textOverflow: "ellipsis",
    display: "-webkit-box",
    "-webkit-line-clamp": 10,
    "-webkit-box-orient": "vertical"
  },
  markdown: {
    /** to make the styles for React Markdown not leak into the description */
    "& :first-child": {
      margin: 0
    }
  },
  label: {
    color: theme.palette.text.secondary,
    textTransform: "uppercase",
    fontWeight: "bold",
    letterSpacing: 0.5,
    lineHeight: 1,
    fontSize: "0.75rem"
  },
  footer: {
    display: "flex",
    justifyContent: "space-between",
    flex: 1,
    alignItems: "center"
  },
  ownedBy: {
    display: "flex",
    alignItems: "center",
    flex: 1,
    color: theme.palette.link
  }
}));
const TemplateCard = (props) => {
  const { onSelected, template } = props;
  const styles = useStyles();
  const analytics = useAnalytics();
  const ownedByRelations = getEntityRelations(template, RELATION_OWNED_BY);
  const app = useApp();
  const iconResolver = (key) => key ? app.getSystemIcon(key) ?? LanguageIcon : LanguageIcon;
  const hasTags = !!template.metadata.tags?.length;
  const hasLinks = !!props.additionalLinks?.length || !!template.metadata.links?.length;
  const displayDefaultDivider = !hasTags && !hasLinks;
  const { allowed: canCreateTask } = usePermission({
    permission: taskCreatePermission
  });
  const handleChoose = useCallback(() => {
    analytics.captureEvent("click", `Template has been opened`);
    onSelected?.(template);
  }, [analytics, onSelected, template]);
  return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, { template }), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 2 }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Box, { className: styles.box }, /* @__PURE__ */ React.createElement(
    MarkdownContent,
    {
      className: styles.markdown,
      content: template.metadata.description ?? "No description"
    }
  ))), displayDefaultDivider && /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Divider, { "data-testid": "template-card-separator" })), hasTags && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Divider, { "data-testid": "template-card-separator--tags" })), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 2 }, template.metadata.tags?.map((tag) => /* @__PURE__ */ React.createElement(Grid, { key: `grid-${tag}`, item: true }, /* @__PURE__ */ React.createElement(
    Chip,
    {
      style: { margin: 0 },
      size: "small",
      label: tag,
      key: tag
    }
  )))))), hasLinks && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Divider, { "data-testid": "template-card-separator--links" })), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 2 }, props.additionalLinks?.map(({ icon, text, url }, index) => /* @__PURE__ */ React.createElement(Grid, { className: styles.linkText, item: true, xs: 6, key: index }, /* @__PURE__ */ React.createElement(CardLink, { icon, text, url }))), template.metadata.links?.map(
    ({ url, icon, title }, index) => /* @__PURE__ */ React.createElement(Grid, { className: styles.linkText, item: true, xs: 6, key: index }, /* @__PURE__ */ React.createElement(
      CardLink,
      {
        icon: iconResolver(icon),
        text: title || url,
        url
      }
    ))
  )))))), /* @__PURE__ */ React.createElement(CardActions, { style: { padding: "16px", flex: 1, alignItems: "flex-end" } }, /* @__PURE__ */ React.createElement("div", { className: styles.footer }, /* @__PURE__ */ React.createElement("div", { className: styles.ownedBy }, ownedByRelations.length > 0 && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(UserIcon, { fontSize: "small" }), /* @__PURE__ */ React.createElement(
    EntityRefLinks,
    {
      style: { marginLeft: "8px" },
      entityRefs: ownedByRelations,
      defaultKind: "Group",
      hideIcons: true
    }
  ))), canCreateTask ? /* @__PURE__ */ React.createElement(
    Button,
    {
      size: "small",
      variant: "outlined",
      color: "primary",
      onClick: handleChoose
    },
    "Choose"
  ) : null)));
};

export { TemplateCard };
//# sourceMappingURL=TemplateCard.esm.js.map
