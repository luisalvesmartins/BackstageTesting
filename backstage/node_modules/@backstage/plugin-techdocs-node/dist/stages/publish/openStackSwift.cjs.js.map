{"version":3,"file":"openStackSwift.cjs.js","sources":["../../../src/stages/publish/openStackSwift.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport JSON5 from 'json5';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { SwiftClient } from '@trendyol-js/openstack-swift-sdk';\nimport { NotFound } from '@trendyol-js/openstack-swift-sdk/lib/types';\nimport { Stream, Readable } from 'stream';\n\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst streamToBuffer = (stream: Stream | Readable): Promise<Buffer> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const chunks: any[] = [];\n      stream.on('data', chunk => chunks.push(chunk));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(Buffer.concat(chunks)));\n    } catch (e) {\n      throw new ForwardedError('Unable to parse the response data', e);\n    }\n  });\n};\n\nconst bufferToStream = (buffer: Buffer): Readable => {\n  const stream = new Readable();\n  stream.push(buffer);\n  stream.push(null);\n  return stream;\n};\n\nexport class OpenStackSwiftPublish implements PublisherBase {\n  private readonly storageClient: SwiftClient;\n  private readonly containerName: string;\n  private readonly logger: LoggerService;\n\n  constructor(options: {\n    storageClient: SwiftClient;\n    containerName: string;\n    logger: LoggerService;\n  }) {\n    this.storageClient = options.storageClient;\n    this.containerName = options.containerName;\n    this.logger = options.logger;\n  }\n\n  static fromConfig(config: Config, logger: LoggerService): PublisherBase {\n    let containerName = '';\n    try {\n      containerName = config.getString(\n        'techdocs.publisher.openStackSwift.containerName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'openStackSwift' in your app config, \" +\n          'techdocs.publisher.openStackSwift.containerName is required.',\n      );\n    }\n\n    const openStackSwiftConfig = config.getConfig(\n      'techdocs.publisher.openStackSwift',\n    );\n\n    const storageClient = new SwiftClient({\n      authEndpoint: openStackSwiftConfig.getString('authUrl'),\n      swiftEndpoint: openStackSwiftConfig.getString('swiftUrl'),\n      credentialId: openStackSwiftConfig.getString('credentials.id'),\n      secret: openStackSwiftConfig.getString('credentials.secret'),\n    });\n\n    return new OpenStackSwiftPublish({ storageClient, containerName, logger });\n  }\n\n  /*\n   * Check if the defined container exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      const container = await this.storageClient.getContainerMetadata(\n        this.containerName,\n      );\n\n      if (!(container instanceof NotFound)) {\n        this.logger.info(\n          `Successfully connected to the OpenStack Swift container ${this.containerName}.`,\n        );\n        return {\n          isAvailable: true,\n        };\n      }\n      this.logger.error(\n        `Could not retrieve metadata about the OpenStack Swift container ${this.containerName}. ` +\n          'Make sure the container exists. Also make sure that authentication is setup either by ' +\n          'explicitly defining credentials and region in techdocs.publisher.openStackSwift in app config or ' +\n          'by using environment variables. Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      return {\n        isAvailable: false,\n      };\n    } catch (err) {\n      assertError(err);\n      this.logger.error(`from OpenStack client library: ${err.message}`);\n      return {\n        isAvailable: false,\n      };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the OpenStack Swift container.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    try {\n      const objects: string[] = [];\n\n      // Note: OpenStack Swift manages creation of parent directories if they do not exist.\n      // So collecting path of only the files is good enough.\n      const allFilesToUpload = await getFileTreeRecursively(directory);\n      const limiter = createLimiter(10);\n      const uploadPromises: Array<Promise<unknown>> = [];\n      for (const filePath of allFilesToUpload) {\n        // Remove the absolute path prefix of the source directory\n        // Path of all files to upload, relative to the root of the source directory\n        // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n        const relativeFilePath = path.relative(directory, filePath);\n        // Convert destination file path to a POSIX path for uploading.\n        // Swift expects / as path separator and relativeFilePath will contain \\\\ on Windows.\n        // https://docs.openstack.org/python-openstackclient/pike/cli/man/openstack.html\n        const relativeFilePathPosix = relativeFilePath\n          .split(path.sep)\n          .join(path.posix.sep);\n\n        // The / delimiter is intentional since it represents the cloud storage and not the local file system.\n        const entityRootDir = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n        const destination = `${entityRootDir}/${relativeFilePathPosix}`; // Swift container file relative path\n        objects.push(destination);\n\n        // Rate limit the concurrent execution of file uploads to batches of 10 (per publish)\n        const uploadFile = limiter(async () => {\n          const fileBuffer = await fs.readFile(filePath);\n          const stream = bufferToStream(fileBuffer);\n          return this.storageClient.upload(\n            this.containerName,\n            destination,\n            stream,\n          );\n        });\n        uploadPromises.push(uploadFile);\n      }\n      await Promise.all(uploadPromises);\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${allFilesToUpload.length}`,\n      );\n      return { objects };\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to OpenStack Swift. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    return await new Promise<TechDocsMetadata>(async (resolve, reject) => {\n      const entityRootDir = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n\n      const downloadResponse = await this.storageClient.download(\n        this.containerName,\n        `${entityRootDir}/techdocs_metadata.json`,\n      );\n\n      if (!(downloadResponse instanceof NotFound)) {\n        const stream = downloadResponse.data;\n        try {\n          const techdocsMetadataJson = await streamToBuffer(stream);\n          if (!techdocsMetadataJson) {\n            throw new Error(\n              `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n            );\n          }\n\n          const techdocsMetadata = JSON5.parse(\n            techdocsMetadataJson.toString('utf-8'),\n          );\n\n          resolve(techdocsMetadata);\n        } catch (err) {\n          assertError(err);\n          this.logger.error(err.message);\n          reject(new Error(err.message));\n        }\n      } else {\n        reject({\n          message: `TechDocs metadata fetch failed, The file /rootDir/${entityRootDir}/techdocs_metadata.json does not exist !`,\n        });\n      }\n    });\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return async (req, res) => {\n      // Decode and trim the leading forward slash\n      // filePath example - /default/Component/documented-component/index.html\n      const filePath = decodeURI(req.path.replace(/^\\//, ''));\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      const downloadResponse = await this.storageClient.download(\n        this.containerName,\n        filePath,\n      );\n\n      if (!(downloadResponse instanceof NotFound)) {\n        const stream = downloadResponse.data;\n\n        try {\n          // Inject response headers\n          for (const [headerKey, headerValue] of Object.entries(\n            responseHeaders,\n          )) {\n            res.setHeader(headerKey, headerValue);\n          }\n\n          res.send(await streamToBuffer(stream));\n        } catch (err) {\n          assertError(err);\n          this.logger.warn(\n            `TechDocs OpenStack swift router failed to serve content from container ${this.containerName} at path ${filePath}: ${err.message}`,\n          );\n          res.status(404).send('File Not Found');\n        }\n      } else {\n        this.logger.warn(\n          `TechDocs OpenStack swift router failed to serve content from container ${this.containerName} at path ${filePath}: Not found`,\n        );\n        res.status(404).send('File Not Found');\n      }\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const entityRootDir = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n    try {\n      const fileResponse = await this.storageClient.getMetadata(\n        this.containerName,\n        `${entityRootDir}/index.html`,\n      );\n\n      if (!(fileResponse instanceof NotFound)) {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      assertError(err);\n      this.logger.warn(err.message);\n      return false;\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const allObjects = await this.getAllObjectsFromContainer();\n    const limiter = createLimiter(concurrency);\n    await Promise.all(\n      allObjects.map(f =>\n        limiter(async file => {\n          let newPath;\n          try {\n            newPath = lowerCaseEntityTripletInStoragePath(file);\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(e.message);\n            return;\n          }\n\n          // If all parts are already lowercase, ignore.\n          if (file === newPath) {\n            return;\n          }\n\n          try {\n            this.logger.debug(`Migrating ${file} to ${newPath}`);\n            await this.storageClient.copy(\n              this.containerName,\n              file,\n              this.containerName,\n              newPath,\n            );\n            if (removeOriginal) {\n              await this.storageClient.delete(this.containerName, file);\n            }\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(`Unable to migrate ${file}: ${e.message}`);\n          }\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Returns a list of all object keys from the configured container.\n   */\n  protected async getAllObjectsFromContainer(\n    { prefix } = { prefix: '' },\n  ): Promise<string[]> {\n    let objects: string[] = [];\n    const OSS_MAX_LIMIT = Math.pow(2, 31) - 1;\n\n    const allObjects = await this.storageClient.list(\n      this.containerName,\n      prefix,\n      OSS_MAX_LIMIT,\n    );\n    objects = allObjects.map((object: any) => object.name);\n\n    return objects;\n  }\n}\n"],"names":["ForwardedError","stream","Readable","SwiftClient","NotFound","assertError","getFileTreeRecursively","createLimiter","path","fs","JSON5","getHeadersForFileExtension","lowerCaseEntityTripletInStoragePath"],"mappings":";;;;;;;;;;;;;;;;;;;AAyCA,MAAM,cAAA,GAAiB,CAAC,MAA+C,KAAA;AACrE,EAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAW,KAAA;AACtC,IAAI,IAAA;AACF,MAAA,MAAM,SAAgB,EAAC,CAAA;AACvB,MAAA,MAAA,CAAO,GAAG,MAAQ,EAAA,CAAA,KAAA,KAAS,MAAO,CAAA,IAAA,CAAK,KAAK,CAAC,CAAA,CAAA;AAC7C,MAAO,MAAA,CAAA,EAAA,CAAG,SAAS,MAAM,CAAA,CAAA;AACzB,MAAO,MAAA,CAAA,EAAA,CAAG,OAAO,MAAM,OAAA,CAAQ,OAAO,MAAO,CAAA,MAAM,CAAC,CAAC,CAAA,CAAA;AAAA,aAC9C,CAAG,EAAA;AACV,MAAM,MAAA,IAAIA,qBAAe,CAAA,mCAAA,EAAqC,CAAC,CAAA,CAAA;AAAA,KACjE;AAAA,GACD,CAAA,CAAA;AACH,CAAA,CAAA;AAEA,MAAM,cAAA,GAAiB,CAAC,MAA6B,KAAA;AACnD,EAAM,MAAAC,QAAA,GAAS,IAAIC,eAAS,EAAA,CAAA;AAC5B,EAAAD,QAAA,CAAO,KAAK,MAAM,CAAA,CAAA;AAClB,EAAAA,QAAA,CAAO,KAAK,IAAI,CAAA,CAAA;AAChB,EAAO,OAAAA,QAAA,CAAA;AACT,CAAA,CAAA;AAEO,MAAM,qBAA+C,CAAA;AAAA,EACzC,aAAA,CAAA;AAAA,EACA,aAAA,CAAA;AAAA,EACA,MAAA,CAAA;AAAA,EAEjB,YAAY,OAIT,EAAA;AACD,IAAA,IAAA,CAAK,gBAAgB,OAAQ,CAAA,aAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,gBAAgB,OAAQ,CAAA,aAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AAAA,GACxB;AAAA,EAEA,OAAO,UAAW,CAAA,MAAA,EAAgB,MAAsC,EAAA;AACtE,IAAA,IAAI,aAAgB,GAAA,EAAA,CAAA;AACpB,IAAI,IAAA;AACF,MAAA,aAAA,GAAgB,MAAO,CAAA,SAAA;AAAA,QACrB,iDAAA;AAAA,OACF,CAAA;AAAA,aACO,KAAO,EAAA;AACd,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,2IAAA;AAAA,OAEF,CAAA;AAAA,KACF;AAEA,IAAA,MAAM,uBAAuB,MAAO,CAAA,SAAA;AAAA,MAClC,mCAAA;AAAA,KACF,CAAA;AAEA,IAAM,MAAA,aAAA,GAAgB,IAAIE,6BAAY,CAAA;AAAA,MACpC,YAAA,EAAc,oBAAqB,CAAA,SAAA,CAAU,SAAS,CAAA;AAAA,MACtD,aAAA,EAAe,oBAAqB,CAAA,SAAA,CAAU,UAAU,CAAA;AAAA,MACxD,YAAA,EAAc,oBAAqB,CAAA,SAAA,CAAU,gBAAgB,CAAA;AAAA,MAC7D,MAAA,EAAQ,oBAAqB,CAAA,SAAA,CAAU,oBAAoB,CAAA;AAAA,KAC5D,CAAA,CAAA;AAED,IAAA,OAAO,IAAI,qBAAsB,CAAA,EAAE,aAAe,EAAA,aAAA,EAAe,QAAQ,CAAA,CAAA;AAAA,GAC3E;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAA2C,GAAA;AAC/C,IAAI,IAAA;AACF,MAAM,MAAA,SAAA,GAAY,MAAM,IAAA,CAAK,aAAc,CAAA,oBAAA;AAAA,QACzC,IAAK,CAAA,aAAA;AAAA,OACP,CAAA;AAEA,MAAI,IAAA,EAAE,qBAAqBC,cAAW,CAAA,EAAA;AACpC,QAAA,IAAA,CAAK,MAAO,CAAA,IAAA;AAAA,UACV,CAAA,wDAAA,EAA2D,KAAK,aAAa,CAAA,CAAA,CAAA;AAAA,SAC/E,CAAA;AACA,QAAO,OAAA;AAAA,UACL,WAAa,EAAA,IAAA;AAAA,SACf,CAAA;AAAA,OACF;AACA,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,QACV,CAAA,gEAAA,EAAmE,KAAK,aAAa,CAAA,iSAAA,CAAA;AAAA,OAIvF,CAAA;AACA,MAAO,OAAA;AAAA,QACL,WAAa,EAAA,KAAA;AAAA,OACf,CAAA;AAAA,aACO,GAAK,EAAA;AACZ,MAAAC,kBAAA,CAAY,GAAG,CAAA,CAAA;AACf,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,CAAkC,+BAAA,EAAA,GAAA,CAAI,OAAO,CAAE,CAAA,CAAA,CAAA;AACjE,MAAO,OAAA;AAAA,QACL,WAAa,EAAA,KAAA;AAAA,OACf,CAAA;AAAA,KACF;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,OAAQ,CAAA;AAAA,IACZ,MAAA;AAAA,IACA,SAAA;AAAA,GAC2C,EAAA;AAC3C,IAAI,IAAA;AACF,MAAA,MAAM,UAAoB,EAAC,CAAA;AAI3B,MAAM,MAAA,gBAAA,GAAmB,MAAMC,8BAAA,CAAuB,SAAS,CAAA,CAAA;AAC/D,MAAM,MAAA,OAAA,GAAUC,+BAAc,EAAE,CAAA,CAAA;AAChC,MAAA,MAAM,iBAA0C,EAAC,CAAA;AACjD,MAAA,KAAA,MAAW,YAAY,gBAAkB,EAAA;AAIvC,QAAA,MAAM,gBAAmB,GAAAC,qBAAA,CAAK,QAAS,CAAA,SAAA,EAAW,QAAQ,CAAA,CAAA;AAI1D,QAAM,MAAA,qBAAA,GAAwB,iBAC3B,KAAM,CAAAA,qBAAA,CAAK,GAAG,CACd,CAAA,IAAA,CAAKA,qBAAK,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAGtB,QAAM,MAAA,aAAA,GAAgB,CAAG,EAAA,MAAA,CAAO,QAAS,CAAA,SAAS,CAAI,CAAA,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA,EAAI,MAAO,CAAA,QAAA,CAAS,IAAI,CAAA,CAAA,CAAA;AACzF,QAAA,MAAM,WAAc,GAAA,CAAA,EAAG,aAAa,CAAA,CAAA,EAAI,qBAAqB,CAAA,CAAA,CAAA;AAC7D,QAAA,OAAA,CAAQ,KAAK,WAAW,CAAA,CAAA;AAGxB,QAAM,MAAA,UAAA,GAAa,QAAQ,YAAY;AACrC,UAAA,MAAM,UAAa,GAAA,MAAMC,mBAAG,CAAA,QAAA,CAAS,QAAQ,CAAA,CAAA;AAC7C,UAAM,MAAA,MAAA,GAAS,eAAe,UAAU,CAAA,CAAA;AACxC,UAAA,OAAO,KAAK,aAAc,CAAA,MAAA;AAAA,YACxB,IAAK,CAAA,aAAA;AAAA,YACL,WAAA;AAAA,YACA,MAAA;AAAA,WACF,CAAA;AAAA,SACD,CAAA,CAAA;AACD,QAAA,cAAA,CAAe,KAAK,UAAU,CAAA,CAAA;AAAA,OAChC;AACA,MAAM,MAAA,OAAA,CAAQ,IAAI,cAAc,CAAA,CAAA;AAChC,MAAA,IAAA,CAAK,MAAO,CAAA,IAAA;AAAA,QACV,4DAA4D,MAAO,CAAA,QAAA,CAAS,IAAI,CAAA,yBAAA,EAA4B,iBAAiB,MAAM,CAAA,CAAA;AAAA,OACrI,CAAA;AACA,MAAA,OAAO,EAAE,OAAQ,EAAA,CAAA;AAAA,aACV,CAAG,EAAA;AACV,MAAM,MAAA,YAAA,GAAe,gDAAgD,CAAC,CAAA,CAAA,CAAA;AACtE,MAAK,IAAA,CAAA,MAAA,CAAO,MAAM,YAAY,CAAA,CAAA;AAC9B,MAAM,MAAA,IAAI,MAAM,YAAY,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAAA,EAEA,MAAM,sBACJ,UAC2B,EAAA;AAC3B,IAAA,OAAO,MAAM,IAAI,OAA0B,CAAA,OAAO,SAAS,MAAW,KAAA;AACpE,MAAM,MAAA,aAAA,GAAgB,GAAG,UAAW,CAAA,SAAS,IAAI,UAAW,CAAA,IAAI,CAAI,CAAA,EAAA,UAAA,CAAW,IAAI,CAAA,CAAA,CAAA;AAEnF,MAAM,MAAA,gBAAA,GAAmB,MAAM,IAAA,CAAK,aAAc,CAAA,QAAA;AAAA,QAChD,IAAK,CAAA,aAAA;AAAA,QACL,GAAG,aAAa,CAAA,uBAAA,CAAA;AAAA,OAClB,CAAA;AAEA,MAAI,IAAA,EAAE,4BAA4BL,cAAW,CAAA,EAAA;AAC3C,QAAA,MAAM,SAAS,gBAAiB,CAAA,IAAA,CAAA;AAChC,QAAI,IAAA;AACF,UAAM,MAAA,oBAAA,GAAuB,MAAM,cAAA,CAAe,MAAM,CAAA,CAAA;AACxD,UAAA,IAAI,CAAC,oBAAsB,EAAA;AACzB,YAAA,MAAM,IAAI,KAAA;AAAA,cACR,8CAA8C,aAAa,CAAA,wBAAA,CAAA;AAAA,aAC7D,CAAA;AAAA,WACF;AAEA,UAAA,MAAM,mBAAmBM,sBAAM,CAAA,KAAA;AAAA,YAC7B,oBAAA,CAAqB,SAAS,OAAO,CAAA;AAAA,WACvC,CAAA;AAEA,UAAA,OAAA,CAAQ,gBAAgB,CAAA,CAAA;AAAA,iBACjB,GAAK,EAAA;AACZ,UAAAL,kBAAA,CAAY,GAAG,CAAA,CAAA;AACf,UAAK,IAAA,CAAA,MAAA,CAAO,KAAM,CAAA,GAAA,CAAI,OAAO,CAAA,CAAA;AAC7B,UAAA,MAAA,CAAO,IAAI,KAAA,CAAM,GAAI,CAAA,OAAO,CAAC,CAAA,CAAA;AAAA,SAC/B;AAAA,OACK,MAAA;AACL,QAAO,MAAA,CAAA;AAAA,UACL,OAAA,EAAS,qDAAqD,aAAa,CAAA,wCAAA,CAAA;AAAA,SAC5E,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA;AAAA;AAAA;AAAA,EAKA,UAA8B,GAAA;AAC5B,IAAO,OAAA,OAAO,KAAK,GAAQ,KAAA;AAGzB,MAAA,MAAM,WAAW,SAAU,CAAA,GAAA,CAAI,KAAK,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAC,CAAA,CAAA;AAGtD,MAAM,MAAA,aAAA,GAAgBG,qBAAK,CAAA,OAAA,CAAQ,QAAQ,CAAA,CAAA;AAC3C,MAAM,MAAA,eAAA,GAAkBG,mCAA2B,aAAa,CAAA,CAAA;AAEhE,MAAM,MAAA,gBAAA,GAAmB,MAAM,IAAA,CAAK,aAAc,CAAA,QAAA;AAAA,QAChD,IAAK,CAAA,aAAA;AAAA,QACL,QAAA;AAAA,OACF,CAAA;AAEA,MAAI,IAAA,EAAE,4BAA4BP,cAAW,CAAA,EAAA;AAC3C,QAAA,MAAM,SAAS,gBAAiB,CAAA,IAAA,CAAA;AAEhC,QAAI,IAAA;AAEF,UAAA,KAAA,MAAW,CAAC,SAAA,EAAW,WAAW,CAAA,IAAK,MAAO,CAAA,OAAA;AAAA,YAC5C,eAAA;AAAA,WACC,EAAA;AACD,YAAI,GAAA,CAAA,SAAA,CAAU,WAAW,WAAW,CAAA,CAAA;AAAA,WACtC;AAEA,UAAA,GAAA,CAAI,IAAK,CAAA,MAAM,cAAe,CAAA,MAAM,CAAC,CAAA,CAAA;AAAA,iBAC9B,GAAK,EAAA;AACZ,UAAAC,kBAAA,CAAY,GAAG,CAAA,CAAA;AACf,UAAA,IAAA,CAAK,MAAO,CAAA,IAAA;AAAA,YACV,0EAA0E,IAAK,CAAA,aAAa,YAAY,QAAQ,CAAA,EAAA,EAAK,IAAI,OAAO,CAAA,CAAA;AAAA,WAClI,CAAA;AACA,UAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;AAAA,SACvC;AAAA,OACK,MAAA;AACL,QAAA,IAAA,CAAK,MAAO,CAAA,IAAA;AAAA,UACV,CAA0E,uEAAA,EAAA,IAAA,CAAK,aAAa,CAAA,SAAA,EAAY,QAAQ,CAAA,WAAA,CAAA;AAAA,SAClH,CAAA;AACA,QAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;AAAA,OACvC;AAAA,KACF,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,qBAAqB,MAAkC,EAAA;AAC3D,IAAM,MAAA,aAAA,GAAgB,CAAG,EAAA,MAAA,CAAO,QAAS,CAAA,SAAS,CAAI,CAAA,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA,EAAI,MAAO,CAAA,QAAA,CAAS,IAAI,CAAA,CAAA,CAAA;AACzF,IAAI,IAAA;AACF,MAAM,MAAA,YAAA,GAAe,MAAM,IAAA,CAAK,aAAc,CAAA,WAAA;AAAA,QAC5C,IAAK,CAAA,aAAA;AAAA,QACL,GAAG,aAAa,CAAA,WAAA,CAAA;AAAA,OAClB,CAAA;AAEA,MAAI,IAAA,EAAE,wBAAwBD,cAAW,CAAA,EAAA;AACvC,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AACA,MAAO,OAAA,KAAA,CAAA;AAAA,aACA,GAAK,EAAA;AACZ,MAAAC,kBAAA,CAAY,GAAG,CAAA,CAAA;AACf,MAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,GAAA,CAAI,OAAO,CAAA,CAAA;AAC5B,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAAA,GACF;AAAA,EAEA,MAAM,eAAgB,CAAA;AAAA,IACpB,cAAiB,GAAA,KAAA;AAAA,IACjB,WAAc,GAAA,EAAA;AAAA,GACE,EAAA;AAEhB,IAAM,MAAA,UAAA,GAAa,MAAM,IAAA,CAAK,0BAA2B,EAAA,CAAA;AACzD,IAAM,MAAA,OAAA,GAAUE,+BAAc,WAAW,CAAA,CAAA;AACzC,IAAA,MAAM,OAAQ,CAAA,GAAA;AAAA,MACZ,UAAW,CAAA,GAAA;AAAA,QAAI,CAAA,CAAA,KACb,OAAQ,CAAA,OAAM,IAAQ,KAAA;AACpB,UAAI,IAAA,OAAA,CAAA;AACJ,UAAI,IAAA;AACF,YAAA,OAAA,GAAUK,4CAAoC,IAAI,CAAA,CAAA;AAAA,mBAC3C,CAAG,EAAA;AACV,YAAAP,kBAAA,CAAY,CAAC,CAAA,CAAA;AACb,YAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,CAAA,CAAE,OAAO,CAAA,CAAA;AAC1B,YAAA,OAAA;AAAA,WACF;AAGA,UAAA,IAAI,SAAS,OAAS,EAAA;AACpB,YAAA,OAAA;AAAA,WACF;AAEA,UAAI,IAAA;AACF,YAAA,IAAA,CAAK,OAAO,KAAM,CAAA,CAAA,UAAA,EAAa,IAAI,CAAA,IAAA,EAAO,OAAO,CAAE,CAAA,CAAA,CAAA;AACnD,YAAA,MAAM,KAAK,aAAc,CAAA,IAAA;AAAA,cACvB,IAAK,CAAA,aAAA;AAAA,cACL,IAAA;AAAA,cACA,IAAK,CAAA,aAAA;AAAA,cACL,OAAA;AAAA,aACF,CAAA;AACA,YAAA,IAAI,cAAgB,EAAA;AAClB,cAAA,MAAM,IAAK,CAAA,aAAA,CAAc,MAAO,CAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,aAC1D;AAAA,mBACO,CAAG,EAAA;AACV,YAAAA,kBAAA,CAAY,CAAC,CAAA,CAAA;AACb,YAAA,IAAA,CAAK,OAAO,IAAK,CAAA,CAAA,kBAAA,EAAqB,IAAI,CAAK,EAAA,EAAA,CAAA,CAAE,OAAO,CAAE,CAAA,CAAA,CAAA;AAAA,WAC5D;AAAA,WACC,CAAC,CAAA;AAAA,OACN;AAAA,KACF,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAgB,2BACd,EAAE,MAAA,KAAW,EAAE,MAAA,EAAQ,IACJ,EAAA;AACnB,IAAA,IAAI,UAAoB,EAAC,CAAA;AACzB,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,EAAE,CAAI,GAAA,CAAA,CAAA;AAExC,IAAM,MAAA,UAAA,GAAa,MAAM,IAAA,CAAK,aAAc,CAAA,IAAA;AAAA,MAC1C,IAAK,CAAA,aAAA;AAAA,MACL,MAAA;AAAA,MACA,aAAA;AAAA,KACF,CAAA;AACA,IAAA,OAAA,GAAU,UAAW,CAAA,GAAA,CAAI,CAAC,MAAA,KAAgB,OAAO,IAAI,CAAA,CAAA;AAErD,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AACF;;;;"}