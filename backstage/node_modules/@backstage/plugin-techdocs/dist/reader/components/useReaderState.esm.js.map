{"version":3,"file":"useReaderState.esm.js","sources":["../../../src/reader/components/useReaderState.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useApi } from '@backstage/core-plugin-api';\nimport { useMemo, useReducer, useRef } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport useAsyncRetry from 'react-use/esm/useAsyncRetry';\nimport { techdocsStorageApiRef } from '@backstage/plugin-techdocs-react';\n\n/**\n * @public\n * A state representation that is used to configure the UI of <Reader />\n */\nexport type ContentStateTypes =\n  /** There is nothing to display but a loading indicator */\n  | 'CHECKING'\n\n  /** There is no content yet -> present a full screen loading page */\n  | 'INITIAL_BUILD'\n\n  /** There is content, but the backend is about to update it */\n  | 'CONTENT_STALE_REFRESHING'\n\n  /** There is content, but after a reload, the content will be different */\n  | 'CONTENT_STALE_READY'\n\n  /** There is content, the backend tried to update it, but failed */\n  | 'CONTENT_STALE_ERROR'\n\n  /** There is nothing to see but a \"not found\" page. Is also shown on page load errors */\n  | 'CONTENT_NOT_FOUND'\n\n  /** There is only the latest and greatest content */\n  | 'CONTENT_FRESH';\n\n/**\n * Calculate the state that should be reported to the display component.\n */\nexport function calculateDisplayState({\n  contentLoading,\n  content,\n  activeSyncState,\n}: Pick<\n  ReducerState,\n  'contentLoading' | 'content' | 'activeSyncState'\n>): ContentStateTypes {\n  // we have nothing to display yet\n  if (contentLoading) {\n    return 'CHECKING';\n  }\n\n  // the build is ready, but it triggered a content reload and the content variable is not trusted\n  if (activeSyncState === 'BUILD_READY_RELOAD') {\n    return 'CHECKING';\n  }\n\n  // there is no content, but the sync process is still evaluating\n  if (!content && activeSyncState === 'CHECKING') {\n    return 'CHECKING';\n  }\n\n  // there is no content yet so we assume that we are building it for the first time\n  if (!content && activeSyncState === 'BUILDING') {\n    return 'INITIAL_BUILD';\n  }\n\n  // if there is still no content after building, it might just not exist\n  if (!content) {\n    return 'CONTENT_NOT_FOUND';\n  }\n\n  // we are still building, but we already show stale content\n  if (activeSyncState === 'BUILDING') {\n    return 'CONTENT_STALE_REFRESHING';\n  }\n\n  // the build is ready, but the content is still stale\n  if (activeSyncState === 'BUILD_READY') {\n    return 'CONTENT_STALE_READY';\n  }\n\n  // the build failed, but the content is still stale\n  if (activeSyncState === 'ERROR') {\n    return 'CONTENT_STALE_ERROR';\n  }\n\n  // seems like the content is up-to-date (or we don't know yet and the sync process is still evaluating in the background)\n  return 'CONTENT_FRESH';\n}\n\n/**\n * The state of the synchronization task. It checks whether the docs are\n * up-to-date. If they aren't, it triggers a build.\n */\ntype SyncStates =\n  /** Checking if it should be synced */\n  | 'CHECKING'\n\n  /** Building the documentation */\n  | 'BUILDING'\n\n  /** Finished building the documentation */\n  | 'BUILD_READY'\n\n  /**\n   * Finished building the documentation and triggered a content reload.\n   * This state is left toward UP_TO_DATE when the content loading has finished.\n   */\n  | 'BUILD_READY_RELOAD'\n\n  /** No need for a sync. The content was already up-to-date. */\n  | 'UP_TO_DATE'\n\n  /** An error occurred */\n  | 'ERROR';\n\ntype ReducerActions =\n  | {\n      type: 'sync';\n      state: SyncStates;\n      syncError?: Error;\n    }\n  | { type: 'contentLoading' }\n  | {\n      type: 'content';\n      path?: string;\n      content?: string;\n      contentError?: Error;\n    }\n  | { type: 'buildLog'; log: string };\n\ntype ReducerState = {\n  /**\n   * The path of the current page\n   */\n  path: string;\n\n  /**\n   * The current sync state\n   */\n  activeSyncState: SyncStates;\n\n  /**\n   * If true, the content is downloading from the storage.\n   */\n  contentLoading: boolean;\n  /**\n   * The content that has been downloaded and should be displayed.\n   */\n  content?: string;\n\n  contentError?: Error;\n  syncError?: Error;\n\n  /**\n   * A list of log messages that were emitted by the build process.\n   */\n  buildLog: string[];\n};\n\nexport function reducer(\n  oldState: ReducerState,\n  action: ReducerActions,\n): ReducerState {\n  const newState = { ...oldState };\n\n  switch (action.type) {\n    case 'sync':\n      // reset the build log when a new check starts\n      if (action.state === 'CHECKING') {\n        newState.buildLog = [];\n      }\n\n      newState.activeSyncState = action.state;\n      newState.syncError = action.syncError;\n      break;\n\n    case 'contentLoading':\n      newState.contentLoading = true;\n\n      // only reset errors but keep the old content until it is replaced by the 'content' action\n      newState.contentError = undefined;\n      break;\n\n    case 'content':\n      // only override the path if it is part of the action\n      if (typeof action.path === 'string') {\n        newState.path = action.path;\n      }\n\n      newState.contentLoading = false;\n      newState.content = action.content;\n      newState.contentError = action.contentError;\n      break;\n\n    case 'buildLog':\n      newState.buildLog = newState.buildLog.concat(action.log);\n      break;\n\n    default:\n      throw new Error();\n  }\n\n  // a content update loads fresh content so the build is updated to being up-to-date\n  if (\n    ['BUILD_READY', 'BUILD_READY_RELOAD'].includes(newState.activeSyncState) &&\n    ['contentLoading', 'content'].includes(action.type)\n  ) {\n    newState.activeSyncState = 'UP_TO_DATE';\n    newState.buildLog = [];\n  }\n\n  return newState;\n}\n/**\n * @public shared reader state\n */\nexport type ReaderState = {\n  state: ContentStateTypes;\n  path: string;\n  contentReload: () => void;\n  content?: string;\n  contentErrorMessage?: string;\n  syncErrorMessage?: string;\n  buildLog: string[];\n};\n\nexport function useReaderState(\n  kind: string,\n  namespace: string,\n  name: string,\n  path: string,\n): ReaderState {\n  const [state, dispatch] = useReducer(reducer, {\n    activeSyncState: 'CHECKING',\n    path,\n    contentLoading: true,\n    buildLog: [],\n  });\n\n  const techdocsStorageApi = useApi(techdocsStorageApiRef);\n\n  // try to load the content. the function will fire events and we don't care for the return values\n  const { retry: contentReload } = useAsyncRetry(async () => {\n    dispatch({ type: 'contentLoading' });\n\n    try {\n      const entityDocs = await techdocsStorageApi.getEntityDocs(\n        { kind, namespace, name },\n        path,\n      );\n\n      // update content and path at the same time\n      dispatch({ type: 'content', content: entityDocs, path });\n\n      return entityDocs;\n    } catch (e) {\n      dispatch({ type: 'content', contentError: e, path });\n    }\n\n    return undefined;\n  }, [techdocsStorageApi, kind, namespace, name, path]);\n\n  // create a ref that holds the latest content. This provides a useAsync hook\n  // with the latest content without restarting the useAsync hook.\n  const contentRef = useRef<{ content?: string; reload: () => void }>({\n    content: undefined,\n    reload: () => {},\n  });\n  contentRef.current = { content: state.content, reload: contentReload };\n\n  // try to derive the state. the function will fire events and we don't care for the return values\n  useAsync(async () => {\n    dispatch({ type: 'sync', state: 'CHECKING' });\n\n    // should only switch to BUILDING if the request takes more than 1 seconds\n    const buildingTimeout = setTimeout(() => {\n      dispatch({ type: 'sync', state: 'BUILDING' });\n    }, 1000);\n\n    try {\n      const result = await techdocsStorageApi.syncEntityDocs(\n        {\n          kind,\n          namespace,\n          name,\n        },\n        log => {\n          dispatch({ type: 'buildLog', log });\n        },\n      );\n\n      switch (result) {\n        case 'updated':\n          // if there was no content prior to building, retry the loading\n          if (!contentRef.current.content) {\n            contentRef.current.reload();\n            dispatch({ type: 'sync', state: 'BUILD_READY_RELOAD' });\n          } else {\n            dispatch({ type: 'sync', state: 'BUILD_READY' });\n          }\n          break;\n        case 'cached':\n          dispatch({ type: 'sync', state: 'UP_TO_DATE' });\n          break;\n\n        default:\n          dispatch({\n            type: 'sync',\n            state: 'ERROR',\n            syncError: new Error('Unexpected return state'),\n          });\n          break;\n      }\n    } catch (e) {\n      dispatch({ type: 'sync', state: 'ERROR', syncError: e });\n    } finally {\n      // Cancel the timer that sets the state \"BUILDING\"\n      clearTimeout(buildingTimeout);\n    }\n  }, [kind, name, namespace, techdocsStorageApi, dispatch, contentRef]);\n\n  const displayState = useMemo(\n    () =>\n      calculateDisplayState({\n        activeSyncState: state.activeSyncState,\n        contentLoading: state.contentLoading,\n        content: state.content,\n      }),\n    [state.activeSyncState, state.content, state.contentLoading],\n  );\n\n  return {\n    state: displayState,\n    contentReload,\n    path: state.path,\n    content: state.content,\n    contentErrorMessage: state.contentError?.toString(),\n    syncErrorMessage: state.syncError?.toString(),\n    buildLog: state.buildLog,\n  };\n}\n"],"names":[],"mappings":"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"}