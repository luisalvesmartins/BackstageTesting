import React, { useEffect } from 'react';
import { Select } from '@backstage/core-components';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import Autocomplete from '@material-ui/lab/Autocomplete';
import TextField from '@material-ui/core/TextField';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const RepoUrlPickerRepoName = (props) => {
  const { repoName, allowedRepos, onChange, rawErrors, availableRepos } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  useEffect(() => {
    if (!repoName) {
      if (allowedRepos?.length) {
        onChange(allowedRepos[0]);
      }
    }
  }, [allowedRepos, repoName, onChange]);
  const repoItems = allowedRepos ? allowedRepos.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !repoName
    },
    allowedRepos?.length ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: t("fields.repoUrlPicker.repository.title"),
        onChange: (selected) => onChange(String(Array.isArray(selected) ? selected[0] : selected)),
        disabled: allowedRepos.length === 1,
        selected: repoName,
        items: repoItems
      }
    ) : /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        value: repoName,
        onInputChange: (_, newValue) => {
          onChange(newValue || "");
        },
        options: availableRepos || [],
        renderInput: (params) => /* @__PURE__ */ React.createElement(
          TextField,
          {
            ...params,
            label: t("fields.repoUrlPicker.repository.inputTitle"),
            required: true
          }
        ),
        freeSolo: true,
        autoSelect: true
      }
    ),
    /* @__PURE__ */ React.createElement(FormHelperText, null, t("fields.repoUrlPicker.repository.description"))
  ));
};

export { RepoUrlPickerRepoName };
//# sourceMappingURL=RepoUrlPickerRepoName.esm.js.map
