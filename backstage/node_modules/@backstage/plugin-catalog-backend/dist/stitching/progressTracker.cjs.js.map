{"version":3,"file":"progressTracker.cjs.js","sources":["../../src/stitching/progressTracker.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '@backstage/errors';\nimport { metrics } from '@opentelemetry/api';\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { DbRefreshStateRow } from '../database/tables';\nimport { createCounterMetric } from '../util/metrics';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// Helps wrap the timing and logging behaviors\nexport function progressTracker(knex: Knex, logger: LoggerService) {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promStitchedEntities = createCounterMetric({\n    name: 'catalog_stitched_entities_count',\n    help: 'Amount of entities stitched. DEPRECATED, use OpenTelemetry metrics instead',\n  });\n\n  const meter = metrics.getMeter('default');\n\n  const stitchedEntities = meter.createCounter(\n    'catalog.stitched.entities.count',\n    {\n      description: 'Amount of entities stitched',\n    },\n  );\n\n  const stitchingDuration = meter.createHistogram(\n    'catalog.stitching.duration',\n    {\n      description: 'Time spent executing the full stitching flow',\n      unit: 'seconds',\n    },\n  );\n\n  const stitchingQueueCount = meter.createObservableGauge(\n    'catalog.stitching.queue.length',\n    { description: 'Number of entities currently in the stitching queue' },\n  );\n  stitchingQueueCount.addCallback(async result => {\n    const total = await knex<DbRefreshStateRow>('refresh_state')\n      .count({ count: '*' })\n      .whereNotNull('next_stitch_at')\n      .where('next_stitch_at', '<=', knex.fn.now());\n    result.observe(Number(total[0].count));\n  });\n\n  const stitchingQueueDelay = meter.createHistogram(\n    'catalog.stitching.queue.delay',\n    {\n      description:\n        'The amount of delay between being scheduled for stitching, and the start of actually being stitched',\n      unit: 'seconds',\n    },\n  );\n\n  function stitchStart(item: {\n    entityRef: string;\n    stitchRequestedAt?: DateTime;\n  }) {\n    logger.debug(`Stitching ${item.entityRef}`);\n\n    const startTime = process.hrtime();\n    if (item.stitchRequestedAt) {\n      stitchingQueueDelay.record(\n        -item.stitchRequestedAt.diffNow().as('seconds'),\n      );\n    }\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    function markComplete(result: string) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result });\n      stitchingDuration.record(endTime(), { result });\n    }\n\n    function markFailed(error: Error) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result: 'error' });\n      stitchingDuration.record(endTime(), { result: 'error' });\n      logger.error(\n        `Failed to stitch ${item.entityRef}, ${stringifyError(error)}`,\n      );\n    }\n\n    return {\n      markComplete,\n      markFailed,\n    };\n  }\n\n  return { stitchStart };\n}\n"],"names":["createCounterMetric","metrics","stringifyError"],"mappings":"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"}