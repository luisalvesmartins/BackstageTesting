{"version":3,"file":"metrics.cjs.js","sources":["../../src/database/metrics.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { createGaugeMetric } from '../util/metrics';\nimport { DbRefreshStateRow, DbRelationsRow, DbLocationsRow } from './tables';\nimport { metrics } from '@opentelemetry/api';\nimport { parseEntityRef } from '@backstage/catalog-model';\n\nexport function initDatabaseMetrics(knex: Knex) {\n  const seenProm = new Set<string>();\n  const seen = new Set<string>();\n  const meter = metrics.getMeter('default');\n  return {\n    entities_count_prom: createGaugeMetric({\n      name: 'catalog_entities_count',\n      help: 'Total amount of entities in the catalog. DEPRECATED: Please use opentelemetry metrics instead.',\n      labelNames: ['kind'],\n      async collect() {\n        const result = await knex<DbRefreshStateRow>('refresh_state').select(\n          'entity_ref',\n        );\n        const results = result\n          .map(row => row.entity_ref.split(':')[0])\n          .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n\n        results.forEach((value, key) => {\n          seenProm.add(key);\n          this.set({ kind: key }, value);\n        });\n\n        // Set all the entities that were not seenProm to 0 and delete them from the seenProm set.\n        seenProm.forEach(key => {\n          if (!results.has(key)) {\n            this.set({ kind: key }, 0);\n            seenProm.delete(key);\n          }\n        });\n      },\n    }),\n    registered_locations_prom: createGaugeMetric({\n      name: 'catalog_registered_locations_count',\n      help: 'Total amount of registered locations in the catalog. DEPRECATED: Please use opentelemetry metrics instead.',\n      async collect() {\n        const total = await knex<DbLocationsRow>('locations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n    relations_prom: createGaugeMetric({\n      name: 'catalog_relations_count',\n      help: 'Total amount of relations between entities. DEPRECATED: Please use opentelemetry metrics instead.',\n      async collect() {\n        const total = await knex<DbRelationsRow>('relations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n    entities_count: meter\n      .createObservableGauge('catalog_entities_count', {\n        description: 'Total amount of entities in the catalog',\n      })\n      .addCallback(async gauge => {\n        const result = await knex<DbRefreshStateRow>('refresh_state').select(\n          'entity_ref',\n        );\n        const results = result\n          .map(row => parseEntityRef(row.entity_ref).kind)\n          .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n\n        results.forEach((value, key) => {\n          seen.add(key);\n          gauge.observe(value, { kind: key });\n        });\n\n        // Set all the entities that were not seen to 0 and delete them from the seen set.\n        seen.forEach(key => {\n          if (!results.has(key)) {\n            gauge.observe(0, { kind: key });\n            seen.delete(key);\n          }\n        });\n      }),\n    registered_locations: meter\n      .createObservableGauge('catalog_registered_locations_count', {\n        description: 'Total amount of registered locations in the catalog',\n      })\n      .addCallback(async gauge => {\n        const total = await knex<DbLocationsRow>('locations').count({\n          count: '*',\n        });\n        gauge.observe(Number(total[0].count));\n      }),\n    relations: meter\n      .createObservableGauge('catalog_relations_count', {\n        description: 'Total amount of relations between entities',\n      })\n      .addCallback(async gauge => {\n        const total = await knex<DbRelationsRow>('relations').count({\n          count: '*',\n        });\n        gauge.observe(Number(total[0].count));\n      }),\n  };\n}\n"],"names":["metrics","createGaugeMetric","parseEntityRef"],"mappings":"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"}