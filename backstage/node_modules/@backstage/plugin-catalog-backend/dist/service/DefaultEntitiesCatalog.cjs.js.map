{"version":3,"file":"DefaultEntitiesCatalog.cjs.js","sources":["../../src/service/DefaultEntitiesCatalog.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { chunk as lodashChunk, isEqual } from 'lodash';\nimport { z } from 'zod';\nimport {\n  Cursor,\n  EntitiesBatchRequest,\n  EntitiesBatchResponse,\n  EntitiesCatalog,\n  EntitiesRequest,\n  EntitiesResponse,\n  EntityAncestryResponse,\n  EntityFacetsRequest,\n  EntityFacetsResponse,\n  EntityOrder,\n  EntityPagination,\n  QueryEntitiesRequest,\n  QueryEntitiesResponse,\n} from '../catalog/types';\nimport {\n  DbFinalEntitiesRow,\n  DbPageInfo,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n  DbRelationsRow,\n  DbSearchRow,\n} from '../database/tables';\nimport { Stitcher } from '../stitching/types';\n\nimport {\n  isQueryEntitiesCursorRequest,\n  isQueryEntitiesInitialRequest,\n} from './util';\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst defaultSortField: EntityOrder = {\n  field: 'metadata.uid',\n  order: 'asc',\n};\n\nconst DEFAULT_LIMIT = 20;\n\nfunction parsePagination(input?: EntityPagination): EntityPagination {\n  if (!input) {\n    return {};\n  }\n\n  let { limit, offset } = input;\n\n  if (input.after === undefined) {\n    return { limit, offset };\n  }\n\n  let cursor;\n  try {\n    const json = Buffer.from(input.after, 'base64').toString('utf8');\n    cursor = JSON.parse(json);\n  } catch {\n    throw new InputError('Malformed after cursor, could not be parsed');\n  }\n\n  if (cursor.limit !== undefined) {\n    if (!Number.isInteger(cursor.limit)) {\n      throw new InputError('Malformed after cursor, limit was not an number');\n    }\n    limit = cursor.limit;\n  }\n\n  if (cursor.offset !== undefined) {\n    if (!Number.isInteger(cursor.offset)) {\n      throw new InputError('Malformed after cursor, offset was not a number');\n    }\n    offset = cursor.offset;\n  }\n\n  return { limit, offset };\n}\n\nfunction stringifyPagination(\n  input: Required<Omit<EntityPagination, 'after'>>,\n): string {\n  const { limit, offset } = input;\n  const json = JSON.stringify({ limit, offset });\n  const base64 = Buffer.from(json, 'utf8').toString('base64');\n  return base64;\n}\n\nfunction addCondition(\n  queryBuilder: Knex.QueryBuilder,\n  db: Knex,\n  filter: EntitiesSearchFilter,\n  negate: boolean = false,\n  entityIdField = 'entity_id',\n): void {\n  const key = filter.key.toLowerCase();\n  const values = filter.values?.map(v => v.toLowerCase());\n\n  // NOTE(freben): This used to be a set of OUTER JOIN, which may seem to\n  // make a lot of sense. However, it had abysmal performance on sqlite\n  // when datasets grew large, so we're using IN instead.\n  const matchQuery = db<DbSearchRow>('search')\n    .select('search.entity_id')\n    .where({ key })\n    .andWhere(function keyFilter() {\n      if (values?.length === 1) {\n        this.where({ value: values.at(0) });\n      } else if (values) {\n        this.andWhere('value', 'in', values);\n      }\n    });\n  queryBuilder.andWhere(entityIdField, negate ? 'not in' : 'in', matchQuery);\n}\n\nfunction isEntitiesSearchFilter(\n  filter: EntitiesSearchFilter | EntityFilter,\n): filter is EntitiesSearchFilter {\n  return filter.hasOwnProperty('key');\n}\n\nfunction isOrEntityFilter(\n  filter: { anyOf: EntityFilter[] } | EntityFilter,\n): filter is { anyOf: EntityFilter[] } {\n  return filter.hasOwnProperty('anyOf');\n}\n\nfunction isNegationEntityFilter(\n  filter: { not: EntityFilter } | EntityFilter,\n): filter is { not: EntityFilter } {\n  return filter.hasOwnProperty('not');\n}\n\nfunction parseFilter(\n  filter: EntityFilter,\n  query: Knex.QueryBuilder,\n  db: Knex,\n  negate: boolean = false,\n  entityIdField = 'entity_id',\n): Knex.QueryBuilder {\n  if (isNegationEntityFilter(filter)) {\n    return parseFilter(filter.not, query, db, !negate, entityIdField);\n  }\n\n  if (isEntitiesSearchFilter(filter)) {\n    return query.andWhere(function filterFunction() {\n      addCondition(this, db, filter, negate, entityIdField);\n    });\n  }\n\n  return query[negate ? 'andWhereNot' : 'andWhere'](function filterFunction() {\n    if (isOrEntityFilter(filter)) {\n      for (const subFilter of filter.anyOf ?? []) {\n        this.orWhere(subQuery =>\n          parseFilter(subFilter, subQuery, db, false, entityIdField),\n        );\n      }\n    } else {\n      for (const subFilter of filter.allOf ?? []) {\n        this.andWhere(subQuery =>\n          parseFilter(subFilter, subQuery, db, false, entityIdField),\n        );\n      }\n    }\n  });\n}\n\nexport class DefaultEntitiesCatalog implements EntitiesCatalog {\n  private readonly database: Knex;\n  private readonly logger: LoggerService;\n  private readonly stitcher: Stitcher;\n\n  constructor(options: {\n    database: Knex;\n    logger: LoggerService;\n    stitcher: Stitcher;\n  }) {\n    this.database = options.database;\n    this.logger = options.logger;\n    this.stitcher = options.stitcher;\n  }\n\n  async entities(request?: EntitiesRequest): Promise<EntitiesResponse> {\n    const db = this.database;\n\n    let entitiesQuery =\n      db<DbFinalEntitiesRow>('final_entities').select('final_entities.*');\n\n    request?.order?.forEach(({ field }, index) => {\n      const alias = `order_${index}`;\n      entitiesQuery = entitiesQuery.leftOuterJoin(\n        { [alias]: 'search' },\n        function search(inner) {\n          inner\n            .on(`${alias}.entity_id`, 'final_entities.entity_id')\n            .andOn(`${alias}.key`, db.raw('?', [field]));\n        },\n      );\n    });\n\n    entitiesQuery = entitiesQuery.whereNotNull('final_entities.final_entity');\n\n    if (request?.filter) {\n      entitiesQuery = parseFilter(\n        request.filter,\n        entitiesQuery,\n        db,\n        false,\n        'final_entities.entity_id',\n      );\n    }\n\n    request?.order?.forEach(({ order }, index) => {\n      if (db.client.config.client === 'pg') {\n        // pg correctly orders by the column value and handling nulls in one go\n        entitiesQuery = entitiesQuery.orderBy([\n          { column: `order_${index}.value`, order, nulls: 'last' },\n        ]);\n      } else {\n        // sqlite and mysql translate the above statement ONLY into \"order by (value is null) asc\"\n        // no matter what the order is, for some reason, so we have to manually add back the statement\n        // that translates to \"order by value <order>\" while avoiding to give an order\n        entitiesQuery = entitiesQuery.orderBy([\n          { column: `order_${index}.value`, order: undefined, nulls: 'last' },\n          { column: `order_${index}.value`, order },\n        ]);\n      }\n    });\n\n    if (!request?.order) {\n      entitiesQuery = entitiesQuery\n        .leftOuterJoin(\n          'refresh_state',\n          'refresh_state.entity_id',\n          'final_entities.entity_id',\n        )\n        .orderBy('refresh_state.entity_ref', 'asc'); // default sort\n    } else {\n      entitiesQuery.orderBy('final_entities.entity_id', 'asc'); // stable sort\n    }\n\n    const { limit, offset } = parsePagination(request?.pagination);\n    if (limit !== undefined) {\n      entitiesQuery = entitiesQuery.limit(limit + 1);\n    }\n    if (offset !== undefined) {\n      entitiesQuery = entitiesQuery.offset(offset);\n    }\n\n    let rows = await entitiesQuery;\n    let pageInfo: DbPageInfo;\n    if (limit === undefined || rows.length <= limit) {\n      pageInfo = { hasNextPage: false };\n    } else {\n      rows = rows.slice(0, -1);\n      pageInfo = {\n        hasNextPage: true,\n        endCursor: stringifyPagination({\n          limit,\n          offset: (offset ?? 0) + limit,\n        }),\n      };\n    }\n\n    let entities: Entity[] = rows.map(e => JSON.parse(e.final_entity!));\n\n    if (request?.fields) {\n      entities = entities.map(e => request.fields!(e));\n    }\n\n    // TODO(freben): This is added as a compatibility guarantee, until we can be\n    // sure that all adopters have re-stitched their entities so that the new\n    // targetRef field is present on them, and that they have stopped consuming\n    // the now-removed old field\n    // TODO(jhaals): Remove this in April 2022\n    for (const entity of entities) {\n      if (entity.relations) {\n        for (const relation of entity.relations as any) {\n          if (!relation.targetRef && relation.target) {\n            // This is the case where an old-form entity, not yet stitched with\n            // the updated code, was in the database\n            relation.targetRef = stringifyEntityRef(relation.target);\n          } else if (!relation.target && relation.targetRef) {\n            // This is the case where a new-form entity, stitched with the\n            // updated code, was in the database but we still want to produce\n            // the old data shape as well for compatibility reasons\n            relation.target = parseEntityRef(relation.targetRef);\n          }\n        }\n      }\n    }\n\n    return {\n      entities,\n      pageInfo,\n    };\n  }\n\n  async entitiesBatch(\n    request: EntitiesBatchRequest,\n  ): Promise<EntitiesBatchResponse> {\n    const lookup = new Map<string, Entity>();\n\n    for (const chunk of lodashChunk(request.entityRefs, 200)) {\n      let query = this.database<DbFinalEntitiesRow>('final_entities')\n        .innerJoin<DbRefreshStateRow>(\n          'refresh_state',\n          'refresh_state.entity_id',\n          'final_entities.entity_id',\n        )\n        .select({\n          entityRef: 'refresh_state.entity_ref',\n          entity: 'final_entities.final_entity',\n        })\n        .whereIn('refresh_state.entity_ref', chunk);\n\n      if (request?.filter) {\n        query = parseFilter(\n          request.filter,\n          query,\n          this.database,\n          false,\n          'refresh_state.entity_id',\n        );\n      }\n\n      for (const row of await query) {\n        lookup.set(row.entityRef, row.entity ? JSON.parse(row.entity) : null);\n      }\n    }\n\n    let items = request.entityRefs.map(ref => lookup.get(ref) ?? null);\n\n    if (request.fields) {\n      items = items.map(e => e && request.fields!(e));\n    }\n\n    return { items };\n  }\n\n  async queryEntities(\n    request: QueryEntitiesRequest,\n  ): Promise<QueryEntitiesResponse> {\n    const db = this.database;\n\n    const limit = request.limit ?? DEFAULT_LIMIT;\n\n    const cursor: Omit<Cursor, 'orderFieldValues'> & {\n      orderFieldValues?: (string | null)[];\n    } = {\n      orderFields: [defaultSortField],\n      isPrevious: false,\n      ...parseCursorFromRequest(request),\n    };\n\n    const isFetchingBackwards = cursor.isPrevious;\n\n    if (cursor.orderFields.length > 1) {\n      this.logger.warn(`Only one sort field is supported, ignoring the rest`);\n    }\n\n    const sortField: EntityOrder = {\n      ...defaultSortField,\n      ...cursor.orderFields[0],\n    };\n\n    const [prevItemOrderFieldValue, prevItemUid] =\n      cursor.orderFieldValues || [];\n\n    const dbQuery = db('final_entities').leftOuterJoin('search', qb =>\n      qb\n        .on('search.entity_id', 'final_entities.entity_id')\n        .andOnVal('search.key', sortField.field),\n    );\n\n    if (cursor.filter) {\n      parseFilter(\n        cursor.filter,\n        dbQuery,\n        db,\n        false,\n        'final_entities.entity_id',\n      );\n    }\n\n    const normalizedFullTextFilterTerm = cursor.fullTextFilter?.term?.trim();\n    const textFilterFields = cursor.fullTextFilter?.fields ?? [sortField.field];\n    if (normalizedFullTextFilterTerm) {\n      if (\n        textFilterFields.length === 1 &&\n        textFilterFields[0] === sortField.field\n      ) {\n        // If there is one item, apply the like query to the top level query which is already\n        //   filtered based on the singular sortField.\n        dbQuery.andWhereRaw(\n          'value like ?',\n          `%${normalizedFullTextFilterTerm.toLocaleLowerCase('en-US')}%`,\n        );\n      } else {\n        const matchQuery = db<DbSearchRow>('search')\n          .select('search.entity_id')\n          .whereIn('key', textFilterFields)\n          .andWhere(function keyFilter() {\n            this.andWhereRaw(\n              'value like ?',\n              `%${normalizedFullTextFilterTerm.toLocaleLowerCase('en-US')}%`,\n            );\n          });\n        dbQuery.andWhere('final_entities.entity_id', 'in', matchQuery);\n      }\n    }\n\n    const countQuery = dbQuery.clone();\n\n    const isOrderingDescending = sortField.order === 'desc';\n\n    if (prevItemOrderFieldValue) {\n      dbQuery.andWhere(function nested() {\n        this.where(\n          'value',\n          isFetchingBackwards !== isOrderingDescending ? '<' : '>',\n          prevItemOrderFieldValue,\n        )\n          .orWhere('value', '=', prevItemOrderFieldValue)\n          .andWhere(\n            'final_entities.entity_id',\n            isFetchingBackwards !== isOrderingDescending ? '<' : '>',\n            prevItemUid,\n          );\n      });\n    }\n\n    if (db.client.config.client === 'pg') {\n      // pg correctly orders by the column value and handling nulls in one go\n      dbQuery.orderBy([\n        {\n          column: 'search.value',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n          nulls: 'last',\n        },\n        {\n          column: 'final_entities.entity_id',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n        },\n      ]);\n    } else {\n      // sqlite and mysql translate the above statement ONLY into \"order by (value is null) asc\"\n      // no matter what the order is, for some reason, so we have to manually add back the statement\n      // that translates to \"order by value <order>\" while avoiding to give an order\n      dbQuery.orderBy([\n        {\n          column: 'search.value',\n          order: undefined,\n          nulls: 'last',\n        },\n        {\n          column: 'search.value',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n        },\n        {\n          column: 'final_entities.entity_id',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n        },\n      ]);\n    }\n\n    if (\n      isQueryEntitiesInitialRequest(request) &&\n      request.offset !== undefined\n    ) {\n      dbQuery.offset(request.offset);\n    }\n    // fetch an extra item to check if there are more items.\n    dbQuery.limit(isFetchingBackwards ? limit : limit + 1);\n\n    countQuery.count('final_entities.entity_id', { as: 'count' });\n\n    const [rows, [{ count }]] = await Promise.all([\n      limit > 0 ? dbQuery : [],\n      // for performance reasons we invoke the countQuery\n      // only on the first request.\n      // The result is then embedded into the cursor\n      // for subsequent requests.\n      typeof cursor.totalItems === 'undefined'\n        ? countQuery\n        : [{ count: cursor.totalItems }],\n    ]);\n\n    const totalItems = Number(count);\n\n    if (isFetchingBackwards) {\n      rows.reverse();\n    }\n    const hasMoreResults =\n      limit > 0 && (isFetchingBackwards || rows.length > limit);\n\n    // discard the extra item only when fetching forward.\n    if (rows.length > limit) {\n      rows.length -= 1;\n    }\n\n    const isInitialRequest = cursor.firstSortFieldValues === undefined;\n\n    const firstRow = rows[0];\n    const lastRow = rows[rows.length - 1];\n\n    const firstSortFieldValues = cursor.firstSortFieldValues || [\n      firstRow?.value,\n      firstRow?.entity_id,\n    ];\n\n    const nextCursor: Cursor | undefined = hasMoreResults\n      ? {\n          ...cursor,\n          orderFieldValues: sortFieldsFromRow(lastRow),\n          firstSortFieldValues,\n          isPrevious: false,\n          totalItems,\n        }\n      : undefined;\n\n    const prevCursor: Cursor | undefined =\n      !isInitialRequest &&\n      rows.length > 0 &&\n      !isEqual(sortFieldsFromRow(firstRow), cursor.firstSortFieldValues)\n        ? {\n            ...cursor,\n            orderFieldValues: sortFieldsFromRow(firstRow),\n            firstSortFieldValues: cursor.firstSortFieldValues,\n            isPrevious: true,\n            totalItems,\n          }\n        : undefined;\n\n    const items = rows\n      .map(e => JSON.parse(e.final_entity!))\n      .map(e => (request.fields ? request.fields(e) : e));\n\n    return {\n      items,\n      pageInfo: {\n        ...(!!prevCursor && { prevCursor }),\n        ...(!!nextCursor && { nextCursor }),\n      },\n      totalItems,\n    };\n  }\n\n  async removeEntityByUid(uid: string): Promise<void> {\n    const dbConfig = this.database.client.config;\n\n    // Clear the hashed state of the immediate parents of the deleted entity.\n    // This makes sure that when they get reprocessed, their output is written\n    // down again. The reason for wanting to do this, is that if the user\n    // deletes entities that ARE still emitted by the parent, the parent\n    // processing will still generate the same output hash as always, which\n    // means it'll never try to write down the children again (it assumes that\n    // they already exist). This means that without the code below, the database\n    // never \"heals\" from accidental deletes.\n    if (dbConfig.client.includes('mysql')) {\n      // MySQL doesn't support the syntax we need to do this in a single query,\n      // http://dev.mysql.com/doc/refman/5.6/en/update.html\n      const results = await this.database<DbRefreshStateRow>('refresh_state')\n        .select('entity_id')\n        .whereIn('entity_ref', function parents(builder) {\n          return builder\n            .from<DbRefreshStateRow>('refresh_state')\n            .innerJoin<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n              {\n                'refresh_state_references.target_entity_ref':\n                  'refresh_state.entity_ref',\n              },\n            )\n            .where('refresh_state.entity_id', '=', uid)\n            .select('refresh_state_references.source_entity_ref');\n        });\n      await this.database<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'child-was-deleted',\n          next_update_at: this.database.fn.now(),\n        })\n        .whereIn(\n          'entity_id',\n          results.map(key => key.entity_id),\n        );\n    } else {\n      await this.database<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'child-was-deleted',\n          next_update_at: this.database.fn.now(),\n        })\n        .whereIn('entity_ref', function parents(builder) {\n          return builder\n            .from<DbRefreshStateRow>('refresh_state')\n            .innerJoin<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n              {\n                'refresh_state_references.target_entity_ref':\n                  'refresh_state.entity_ref',\n              },\n            )\n            .where('refresh_state.entity_id', '=', uid)\n            .select('refresh_state_references.source_entity_ref');\n        });\n    }\n\n    // Stitch the entities that the deleted one had relations to. If we do not\n    // do this, the entities in the other end of the relations will still look\n    // like they have a relation to the entity that was deleted, despite not\n    // having any corresponding rows in the relations table.\n    const relationPeers = await this.database\n      .from<DbRelationsRow>('relations')\n      .innerJoin<DbRefreshStateReferencesRow>('refresh_state', {\n        'refresh_state.entity_ref': 'relations.target_entity_ref',\n      })\n      .where('relations.originating_entity_id', '=', uid)\n      .andWhere('refresh_state.entity_id', '!=', uid)\n      .select({ ref: 'relations.target_entity_ref' })\n      .union(other =>\n        other\n          .from<DbRelationsRow>('relations')\n          .innerJoin<DbRefreshStateReferencesRow>('refresh_state', {\n            'refresh_state.entity_ref': 'relations.source_entity_ref',\n          })\n          .where('relations.originating_entity_id', '=', uid)\n          .andWhere('refresh_state.entity_id', '!=', uid)\n          .select({ ref: 'relations.source_entity_ref' }),\n      );\n\n    await this.database<DbRefreshStateRow>('refresh_state')\n      .where('entity_id', uid)\n      .delete();\n\n    await this.stitcher.stitch({\n      entityRefs: new Set(relationPeers.map(p => p.ref)),\n    });\n  }\n\n  async entityAncestry(rootRef: string): Promise<EntityAncestryResponse> {\n    const [rootRow] = await this.database<DbRefreshStateRow>('refresh_state')\n      .leftJoin<DbFinalEntitiesRow>('final_entities', {\n        'refresh_state.entity_id': 'final_entities.entity_id',\n      })\n      .where('refresh_state.entity_ref', '=', rootRef)\n      .select({\n        entityJson: 'final_entities.final_entity',\n      });\n\n    if (!rootRow) {\n      throw new NotFoundError(`No such entity ${rootRef}`);\n    }\n\n    const rootEntity = JSON.parse(rootRow.entityJson) as Entity;\n    const seenEntityRefs = new Set<string>();\n    const todo = new Array<Entity>();\n    const items = new Array<{ entity: Entity; parentEntityRefs: string[] }>();\n\n    for (\n      let current: Entity | undefined = rootEntity;\n      current;\n      current = todo.pop()\n    ) {\n      const currentRef = stringifyEntityRef(current);\n      seenEntityRefs.add(currentRef);\n\n      const parentRows = await this.database<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .innerJoin<DbRefreshStateRow>('refresh_state', {\n          'refresh_state_references.source_entity_ref':\n            'refresh_state.entity_ref',\n        })\n        .innerJoin<DbFinalEntitiesRow>('final_entities', {\n          'refresh_state.entity_id': 'final_entities.entity_id',\n        })\n        .where('refresh_state_references.target_entity_ref', '=', currentRef)\n        .select({\n          parentEntityRef: 'refresh_state.entity_ref',\n          parentEntityJson: 'final_entities.final_entity',\n        });\n\n      const parentRefs: string[] = [];\n      for (const { parentEntityRef, parentEntityJson } of parentRows) {\n        parentRefs.push(parentEntityRef);\n        if (!seenEntityRefs.has(parentEntityRef)) {\n          seenEntityRefs.add(parentEntityRef);\n          todo.push(JSON.parse(parentEntityJson));\n        }\n      }\n\n      items.push({\n        entity: current,\n        parentEntityRefs: parentRefs,\n      });\n    }\n\n    return {\n      rootEntityRef: stringifyEntityRef(rootEntity),\n      items,\n    };\n  }\n\n  async facets(request: EntityFacetsRequest): Promise<EntityFacetsResponse> {\n    const facets: EntityFacetsResponse['facets'] = {};\n    const db = this.database;\n\n    for (const facet of request.facets) {\n      const dbQuery = db<DbSearchRow>('search')\n        .where('search.key', facet.toLocaleLowerCase('en-US'))\n        .whereNotNull('search.original_value')\n        .select({ value: 'search.original_value', count: db.raw('count(*)') })\n        .groupBy('search.original_value');\n\n      if (request?.filter) {\n        parseFilter(request.filter, dbQuery, db, false, 'search.entity_id');\n      }\n\n      const result = await dbQuery;\n\n      facets[facet] = result.map(data => ({\n        value: String(data.value),\n        count: Number(data.count),\n      }));\n    }\n\n    return { facets };\n  }\n}\n\nconst entityFilterParser: z.ZodSchema<EntityFilter> = z.lazy(() =>\n  z\n    .object({\n      key: z.string(),\n      values: z.array(z.string()).optional(),\n    })\n    .or(z.object({ not: entityFilterParser }))\n    .or(z.object({ anyOf: z.array(entityFilterParser) }))\n    .or(z.object({ allOf: z.array(entityFilterParser) })),\n);\n\nexport const cursorParser: z.ZodSchema<Cursor> = z.object({\n  orderFields: z.array(\n    z.object({ field: z.string(), order: z.enum(['asc', 'desc']) }),\n  ),\n  orderFieldValues: z.array(z.string().or(z.null())),\n  filter: entityFilterParser.optional(),\n  isPrevious: z.boolean(),\n  query: z.string().optional(),\n  firstSortFieldValues: z.array(z.string().or(z.null())).optional(),\n  totalItems: z.number().optional(),\n});\n\nfunction parseCursorFromRequest(\n  request?: QueryEntitiesRequest,\n): Partial<Cursor> {\n  if (isQueryEntitiesInitialRequest(request)) {\n    const {\n      filter,\n      orderFields: sortFields = [defaultSortField],\n      fullTextFilter,\n    } = request;\n    return { filter, orderFields: sortFields, fullTextFilter };\n  }\n  if (isQueryEntitiesCursorRequest(request)) {\n    return request.cursor;\n  }\n  return {};\n}\n\nfunction invertOrder(order: EntityOrder['order']) {\n  return order === 'asc' ? 'desc' : 'asc';\n}\n\nfunction sortFieldsFromRow(row: DbSearchRow) {\n  return [row.value, row.entity_id];\n}\n"],"names":["InputError","stringifyEntityRef","parseEntityRef","lodashChunk","isQueryEntitiesInitialRequest","isEqual","NotFoundError","z","isQueryEntitiesCursorRequest"],"mappings":"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"}