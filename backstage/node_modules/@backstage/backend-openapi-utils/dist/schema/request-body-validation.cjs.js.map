{"version":3,"file":"request-body-validation.cjs.js","sources":["../../src/schema/request-body-validation.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport { Operation, ParserOptions, RequestParser } from './types';\nimport { ValidateFunction } from 'ajv';\nimport { OperationError, OperationParsingError } from './errors';\nimport { RequestBodyObject, SchemaObject } from 'openapi3-ts';\n\nclass DisabledRequestBodyParser\n  implements RequestParser<JsonObject | undefined>\n{\n  operation: Operation;\n  constructor(operation: Operation) {\n    this.operation = operation;\n  }\n  async parse(request: Request): Promise<JsonObject | undefined> {\n    const bodyText = await request.text();\n    if (bodyText?.length) {\n      throw new OperationError(\n        this.operation,\n        'Received a body but no schema was found',\n      );\n    }\n    return undefined;\n  }\n}\nexport class RequestBodyParser\n  implements RequestParser<JsonObject | undefined>\n{\n  operation: Operation;\n  disabled: boolean = false;\n  validate!: ValidateFunction;\n  schema!: SchemaObject;\n  requestBodySchema!: RequestBodyObject;\n\n  static fromOperation(operation: Operation, options: ParserOptions) {\n    return operation.schema.requestBody\n      ? new RequestBodyParser(operation, options)\n      : new DisabledRequestBodyParser(operation);\n  }\n\n  constructor(operation: Operation, options: ParserOptions) {\n    this.operation = operation;\n    const { schema: operationSchema } = this.operation;\n    const requestBody = operationSchema.requestBody;\n\n    if (!requestBody) {\n      throw new OperationError(\n        this.operation,\n        'No request body found in operation',\n      );\n    }\n\n    if ('$ref' in requestBody!) {\n      throw new OperationError(\n        this.operation,\n        'Reference objects are not supported',\n      );\n    }\n    if (!requestBody!.content) {\n      throw new OperationError(\n        this.operation,\n        'No content found in request body',\n      );\n    }\n    const contentTypes = requestBody!.content;\n    const jsonContentType = Object.keys(contentTypes).find(contentType =>\n      contentType.split(';').includes('application/json'),\n    );\n    if (!jsonContentType) {\n      throw new OperationError(\n        this.operation,\n        'No application/json content type found in request body',\n      );\n    }\n    const schema = requestBody!.content[jsonContentType].schema;\n    if (!schema) {\n      throw new OperationError(\n        this.operation,\n        'No JSON schema found in request body',\n      );\n    }\n    if ('$ref' in schema) {\n      throw new OperationError(\n        this.operation,\n        'Reference objects are not supported',\n      );\n    }\n    this.validate = options.ajv.compile(schema);\n    this.schema = schema;\n    this.requestBodySchema = requestBody;\n  }\n  async parse(request: Request): Promise<JsonObject | undefined> {\n    const bodyText = await request.text();\n    if (this.requestBodySchema.required && !bodyText?.length) {\n      throw new OperationError(\n        this.operation,\n        `No request body found for ${request.url}`,\n      );\n    }\n\n    const contentType =\n      request.headers.get('content-type') || 'application/json';\n    if (!contentType.split(';').includes('application/json')) {\n      throw new OperationError(\n        this.operation,\n        'Content type is not application/json',\n      );\n    }\n    const body = (await request.json()) as JsonObject;\n    const valid = this.validate(body);\n    if (!valid) {\n      throw new OperationParsingError(\n        this.operation,\n        `Request body`,\n        this.validate.errors!,\n      );\n    }\n    return body;\n  }\n}\n"],"names":["OperationError","OperationParsingError"],"mappings":"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"}