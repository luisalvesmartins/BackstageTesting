{"version":3,"file":"instantiateAppNodeTree.esm.js","sources":["../../src/tree/instantiateAppNodeTree.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyExtensionDataRef,\n  ApiHolder,\n  ExtensionDataContainer,\n  ExtensionDataRef,\n  ExtensionInput,\n  ResolvedExtensionInputs,\n} from '@backstage/frontend-plugin-api';\nimport mapValues from 'lodash/mapValues';\nimport { AppNode, AppNodeInstance } from '@backstage/frontend-plugin-api';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExtension } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\nfunction resolveV1InputDataMap(\n  dataMap: {\n    [name in string]: AnyExtensionDataRef;\n  },\n  attachment: AppNode,\n  inputName: string,\n) {\n  return mapValues(dataMap, ref => {\n    const value = attachment.instance?.getData(ref);\n    if (value === undefined && !ref.config.optional) {\n      const expected = Object.values(dataMap)\n        .filter(r => !r.config.optional)\n        .map(r => `'${r.id}'`)\n        .join(', ');\n\n      const provided = [...(attachment.instance?.getDataRefs() ?? [])]\n        .map(r => `'${r.id}'`)\n        .join(', ');\n\n      throw new Error(\n        `extension '${attachment.spec.id}' could not be attached because its output data (${provided}) does not match what the input '${inputName}' requires (${expected})`,\n      );\n    }\n    return value;\n  });\n}\n\nfunction resolveInputDataContainer(\n  extensionData: Array<AnyExtensionDataRef>,\n  attachment: AppNode,\n  inputName: string,\n): { node: AppNode } & ExtensionDataContainer<AnyExtensionDataRef> {\n  const dataMap = new Map<string, unknown>();\n\n  for (const ref of extensionData) {\n    if (dataMap.has(ref.id)) {\n      throw new Error(`Unexpected duplicate input data '${ref.id}'`);\n    }\n    const value = attachment.instance?.getData(ref);\n    if (value === undefined && !ref.config.optional) {\n      const expected = extensionData\n        .filter(r => !r.config.optional)\n        .map(r => `'${r.id}'`)\n        .join(', ');\n\n      const provided = [...(attachment.instance?.getDataRefs() ?? [])]\n        .map(r => `'${r.id}'`)\n        .join(', ');\n\n      throw new Error(\n        `extension '${attachment.spec.id}' could not be attached because its output data (${provided}) does not match what the input '${inputName}' requires (${expected})`,\n      );\n    }\n\n    dataMap.set(ref.id, value);\n  }\n\n  return {\n    node: attachment,\n    get(ref) {\n      return dataMap.get(ref.id);\n    },\n    *[Symbol.iterator]() {\n      for (const [id, value] of dataMap) {\n        // TODO: Would be better to be able to create a new instance using the ref here instead\n        yield {\n          $$type: '@backstage/ExtensionDataValue',\n          id,\n          value,\n        };\n      }\n    },\n  } as { node: AppNode } & ExtensionDataContainer<AnyExtensionDataRef>;\n}\n\nfunction reportUndeclaredAttachments(\n  id: string,\n  inputMap: { [name in string]: unknown },\n  attachments: ReadonlyMap<string, AppNode[]>,\n) {\n  const undeclaredAttachments = Array.from(attachments.entries()).filter(\n    ([inputName]) => inputMap[inputName] === undefined,\n  );\n\n  const inputNames = Object.keys(inputMap);\n\n  for (const [name, nodes] of undeclaredAttachments) {\n    const pl = nodes.length > 1;\n    // eslint-disable-next-line no-console\n    console.warn(\n      [\n        `The extension${pl ? 's' : ''} '${nodes\n          .map(n => n.spec.id)\n          .join(\"', '\")}' ${pl ? 'are' : 'is'}`,\n        `attached to the input '${name}' of the extension '${id}', but it`,\n        inputNames.length === 0\n          ? 'has no inputs'\n          : `has no such input (candidates are '${inputNames.join(\"', '\")}')`,\n      ].join(' '),\n    );\n  }\n}\n\nfunction resolveV1Inputs(\n  inputMap: {\n    [inputName in string]: {\n      $$type: '@backstage/ExtensionInput';\n      extensionData: {\n        [name in string]: AnyExtensionDataRef;\n      };\n      config: { optional: boolean; singleton: boolean };\n    };\n  },\n  attachments: ReadonlyMap<string, AppNode[]>,\n) {\n  return mapValues(inputMap, (input, inputName) => {\n    const attachedNodes = attachments.get(inputName) ?? [];\n\n    if (input.config.singleton) {\n      if (attachedNodes.length > 1) {\n        const attachedNodeIds = attachedNodes.map(e => e.spec.id);\n        throw Error(\n          `expected ${\n            input.config.optional ? 'at most' : 'exactly'\n          } one '${inputName}' input but received multiple: '${attachedNodeIds.join(\n            \"', '\",\n          )}'`,\n        );\n      } else if (attachedNodes.length === 0) {\n        if (input.config.optional) {\n          return undefined;\n        }\n        throw Error(`input '${inputName}' is required but was not received`);\n      }\n      return {\n        node: attachedNodes[0],\n        output: resolveV1InputDataMap(\n          input.extensionData,\n          attachedNodes[0],\n          inputName,\n        ),\n      };\n    }\n\n    return attachedNodes.map(attachment => ({\n      node: attachment,\n      output: resolveV1InputDataMap(input.extensionData, attachment, inputName),\n    }));\n  }) as {\n    [inputName in string]: {\n      node: AppNode;\n      output: {\n        [name in string]: unknown;\n      };\n    };\n  };\n}\n\nfunction resolveV2Inputs(\n  inputMap: {\n    [inputName in string]: ExtensionInput<\n      AnyExtensionDataRef,\n      { optional: boolean; singleton: boolean }\n    >;\n  },\n  attachments: ReadonlyMap<string, AppNode[]>,\n): ResolvedExtensionInputs<{\n  [inputName in string]: ExtensionInput<\n    AnyExtensionDataRef,\n    { optional: boolean; singleton: boolean }\n  >;\n}> {\n  return mapValues(inputMap, (input, inputName) => {\n    const attachedNodes = attachments.get(inputName) ?? [];\n\n    if (input.config.singleton) {\n      if (attachedNodes.length > 1) {\n        const attachedNodeIds = attachedNodes.map(e => e.spec.id);\n        throw Error(\n          `expected ${\n            input.config.optional ? 'at most' : 'exactly'\n          } one '${inputName}' input but received multiple: '${attachedNodeIds.join(\n            \"', '\",\n          )}'`,\n        );\n      } else if (attachedNodes.length === 0) {\n        if (input.config.optional) {\n          return undefined;\n        }\n        throw Error(`input '${inputName}' is required but was not received`);\n      }\n      return resolveInputDataContainer(\n        input.extensionData,\n        attachedNodes[0],\n        inputName,\n      );\n    }\n\n    return attachedNodes.map(attachment =>\n      resolveInputDataContainer(input.extensionData, attachment, inputName),\n    );\n  }) as ResolvedExtensionInputs<{\n    [inputName in string]: ExtensionInput<\n      AnyExtensionDataRef,\n      { optional: boolean; singleton: boolean }\n    >;\n  }>;\n}\n\n/** @internal */\nexport function createAppNodeInstance(options: {\n  node: AppNode;\n  apis: ApiHolder;\n  attachments: ReadonlyMap<string, AppNode[]>;\n}): AppNodeInstance {\n  const { node, apis, attachments } = options;\n  const { id, extension, config } = node.spec;\n  const extensionData = new Map<string, unknown>();\n  const extensionDataRefs = new Set<ExtensionDataRef<unknown>>();\n\n  let parsedConfig: unknown;\n  try {\n    parsedConfig = extension.configSchema?.parse(config ?? {});\n  } catch (e) {\n    throw new Error(\n      `Invalid configuration for extension '${id}'; caused by ${e}`,\n    );\n  }\n\n  try {\n    const internalExtension = toInternalExtension(extension);\n\n    if (process.env.NODE_ENV !== 'production') {\n      reportUndeclaredAttachments(id, internalExtension.inputs, attachments);\n    }\n\n    if (internalExtension.version === 'v1') {\n      const namedOutputs = internalExtension.factory({\n        node,\n        apis,\n        config: parsedConfig,\n        inputs: resolveV1Inputs(internalExtension.inputs, attachments),\n      });\n\n      for (const [name, output] of Object.entries(namedOutputs)) {\n        const ref = internalExtension.output[name];\n        if (!ref) {\n          throw new Error(`unknown output provided via '${name}'`);\n        }\n        if (extensionData.has(ref.id)) {\n          throw new Error(\n            `duplicate extension data '${ref.id}' received via output '${name}'`,\n          );\n        }\n        extensionData.set(ref.id, output);\n        extensionDataRefs.add(ref);\n      }\n    } else if (internalExtension.version === 'v2') {\n      const outputDataValues = internalExtension.factory({\n        node,\n        apis,\n        config: parsedConfig,\n        inputs: resolveV2Inputs(internalExtension.inputs, attachments),\n      });\n\n      const outputDataMap = new Map<string, unknown>();\n      for (const value of outputDataValues) {\n        if (outputDataMap.has(value.id)) {\n          throw new Error(`duplicate extension data output '${value.id}'`);\n        }\n        outputDataMap.set(value.id, value.value);\n      }\n\n      for (const ref of internalExtension.output) {\n        const value = outputDataMap.get(ref.id);\n        outputDataMap.delete(ref.id);\n        if (value === undefined) {\n          if (!ref.config.optional) {\n            throw new Error(\n              `missing required extension data output '${ref.id}'`,\n            );\n          }\n        } else {\n          extensionData.set(ref.id, value);\n          extensionDataRefs.add(ref);\n        }\n      }\n\n      if (outputDataMap.size > 0) {\n        throw new Error(\n          `unexpected output '${Array.from(outputDataMap.keys()).join(\n            \"', '\",\n          )}'`,\n        );\n      }\n    } else {\n      throw new Error(\n        `unexpected extension version '${(internalExtension as any).version}'`,\n      );\n    }\n  } catch (e) {\n    throw new Error(\n      `Failed to instantiate extension '${id}'${\n        e.name === 'Error' ? `, ${e.message}` : `; caused by ${e.stack}`\n      }`,\n    );\n  }\n\n  return {\n    getDataRefs() {\n      return extensionDataRefs.values();\n    },\n    getData<T>(ref: ExtensionDataRef<T>): T | undefined {\n      return extensionData.get(ref.id) as T | undefined;\n    },\n  };\n}\n\n/**\n * Starting at the provided node, instantiate all reachable nodes in the tree that have not been disabled.\n * @internal\n */\nexport function instantiateAppNodeTree(\n  rootNode: AppNode,\n  apis: ApiHolder,\n): void {\n  function createInstance(node: AppNode): AppNodeInstance | undefined {\n    if (node.instance) {\n      return node.instance;\n    }\n    if (node.spec.disabled) {\n      return undefined;\n    }\n\n    const instantiatedAttachments = new Map<string, AppNode[]>();\n\n    for (const [input, children] of node.edges.attachments) {\n      const instantiatedChildren = children.flatMap(child => {\n        const childInstance = createInstance(child);\n        if (!childInstance) {\n          return [];\n        }\n        return [child];\n      });\n      if (instantiatedChildren.length > 0) {\n        instantiatedAttachments.set(input, instantiatedChildren);\n      }\n    }\n\n    (node as Mutable<AppNode>).instance = createAppNodeInstance({\n      node,\n      apis,\n      attachments: instantiatedAttachments,\n    });\n\n    return node.instance;\n  }\n\n  createInstance(rootNode);\n}\n"],"names":[],"mappings":"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"}