{"version":3,"file":"bitbucketServerPullRequest.cjs.js","sources":["../../src/actions/bitbucketServerPullRequest.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  getBitbucketServerRequestOptions,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  commitAndPushBranch,\n  addFiles,\n  createBranch as createGitBranch,\n  cloneRepo,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport { Config } from '@backstage/config';\nimport fs from 'fs-extra';\nimport { examples } from './bitbucketServerPullRequest.examples';\n\nconst createPullRequest = async (opts: {\n  project: string;\n  repo: string;\n  title: string;\n  description?: string;\n  toRef: {\n    id: string;\n    displayId: string;\n    type: string;\n    latestCommit: string;\n    latestChangeset: string;\n    isDefault: boolean;\n  };\n  fromRef: {\n    id: string;\n    displayId: string;\n    type: string;\n    latestCommit: string;\n    latestChangeset: string;\n    isDefault: boolean;\n  };\n  reviewers?: string[];\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    title,\n    description,\n    toRef,\n    fromRef,\n    reviewers,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const data: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      title: title,\n      description: description,\n      state: 'OPEN',\n      open: true,\n      closed: false,\n      locked: true,\n      toRef: toRef,\n      fromRef: fromRef,\n      reviewers: reviewers?.map(reviewer => ({ user: { name: reviewer } })),\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(repo)}/pull-requests`,\n      data,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create pull-reqeusts, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create pull requests, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  return `${r.links.self[0].href}`;\n};\nconst findBranches = async (opts: {\n  project: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const { project, repo, branchName, authorization, apiBaseUrl } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(\n        repo,\n      )}/branches?boostMatches=true&filterText=${encodeURIComponent(\n        branchName,\n      )}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to get branches, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to get branches, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  for (const object of r.values) {\n    if (object.displayId === branchName) {\n      return object;\n    }\n  }\n\n  return undefined;\n};\nconst createBranch = async (opts: {\n  project: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n  startPoint: string;\n}) => {\n  const { project, repo, branchName, authorization, apiBaseUrl, startPoint } =\n    opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: branchName,\n      startPoint,\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${encodeURIComponent(\n        project,\n      )}/repos/${encodeURIComponent(repo)}/branches`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create branch, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to create branch, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  return await response.json();\n};\nconst getDefaultBranch = async (opts: {\n  project: string;\n  repo: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const { project, repo, authorization, apiBaseUrl } = opts;\n  let response: Response;\n\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/projects/${project}/repos/${repo}/default-branch`,\n      options,\n    );\n  } catch (error) {\n    throw error;\n  }\n\n  const { displayId } = await response.json();\n  const defaultBranch = displayId;\n  if (!defaultBranch) {\n    throw new Error(`Could not fetch default branch for ${project}/${repo}`);\n  }\n  return defaultBranch;\n};\nconst isApiBaseUrlHttps = (apiBaseUrl: string): boolean => {\n  const url = new URL(apiBaseUrl);\n  return url.protocol === 'https:';\n};\n/**\n * Creates a BitbucketServer Pull Request action.\n * @public\n */\nexport function createPublishBitbucketServerPullRequestAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    title: string;\n    description?: string;\n    targetBranch?: string;\n    sourceBranch: string;\n    reviewers?: string[];\n    token?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n  }>({\n    id: 'publish:bitbucketServer:pull-request',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'title', 'sourceBranch'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          title: {\n            title: 'Pull Request title',\n            type: 'string',\n            description: 'The title for the pull request',\n          },\n          description: {\n            title: 'Pull Request Description',\n            type: 'string',\n            description: 'The description of the pull request',\n          },\n          targetBranch: {\n            title: 'Target Branch',\n            type: 'string',\n            description: `Branch of repository to apply changes to. The default value is 'master'`,\n          },\n          sourceBranch: {\n            title: 'Source Branch',\n            type: 'string',\n            description: 'Branch of repository to copy changes from',\n          },\n          reviewers: {\n            title: 'Pull Request Reviewers',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'The usernames of reviewers that will be added to the pull request',\n          },\n          token: {\n            title: 'Authorization Token',\n            type: 'string',\n            description:\n              'The token to use for authorization to BitBucket Server',\n          },\n          gitAuthorName: {\n            title: 'Author Name',\n            type: 'string',\n            description: `Sets the author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Author Email',\n            type: 'string',\n            description: `Sets the author email for the commit.`,\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          pullRequestUrl: {\n            title: 'A URL to the pull request with the provider',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        title,\n        description,\n        targetBranch,\n        sourceBranch,\n        reviewers,\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { project, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketServer.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const token = ctx.input.token ?? integrationConfig.config.token;\n\n      const authConfig = {\n        ...integrationConfig.config,\n        ...{ token },\n      };\n\n      const reqOpts = getBitbucketServerRequestOptions(authConfig);\n      const authorization = reqOpts.headers.Authorization;\n      if (!authorization) {\n        throw new Error(\n          `Authorization has not been provided for ${integrationConfig.config.host}. Please add either (a) a user login auth token, or (b) a token input from the template or (c) username + password to the integration config.`,\n        );\n      }\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      let finalTargetBranch = targetBranch;\n      if (!finalTargetBranch) {\n        finalTargetBranch = await getDefaultBranch({\n          project,\n          repo,\n          authorization,\n          apiBaseUrl,\n        });\n      }\n\n      const toRef = await findBranches({\n        project,\n        repo,\n        branchName: finalTargetBranch!,\n        authorization,\n        apiBaseUrl,\n      });\n\n      let fromRef = await findBranches({\n        project,\n        repo,\n        branchName: sourceBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      if (!fromRef) {\n        // create branch\n        ctx.logger.info(\n          `source branch not found -> creating branch named: ${sourceBranch} lastCommit: ${toRef.latestCommit}`,\n        );\n        const latestCommit = toRef.latestCommit;\n\n        fromRef = await createBranch({\n          project,\n          repo,\n          branchName: sourceBranch,\n          authorization,\n          apiBaseUrl,\n          startPoint: latestCommit,\n        });\n\n        const isHttps: boolean = isApiBaseUrlHttps(apiBaseUrl);\n        const remoteUrl = `${\n          isHttps ? 'https' : 'http'\n        }://${host}/scm/${project}/${repo}.git`;\n\n        const auth = authConfig.token\n          ? {\n              token: token!,\n            }\n          : {\n              username: authConfig.username!,\n              password: authConfig.password!,\n            };\n\n        const gitAuthorInfo = {\n          name:\n            gitAuthorName ||\n            config.getOptionalString('scaffolder.defaultAuthor.name'),\n          email:\n            gitAuthorEmail ||\n            config.getOptionalString('scaffolder.defaultAuthor.email'),\n        };\n\n        const tempDir = await ctx.createTemporaryDirectory();\n        const sourceDir = getRepoSourceDirectory(ctx.workspacePath, undefined);\n        await cloneRepo({\n          url: remoteUrl,\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          ref: sourceBranch,\n        });\n\n        await createGitBranch({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          ref: sourceBranch,\n        });\n\n        // copy files\n        fs.cpSync(sourceDir, tempDir, {\n          recursive: true,\n          filter: path => {\n            return !(path.indexOf('.git') > -1);\n          },\n        });\n\n        await addFiles({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          filepath: '.',\n        });\n\n        await commitAndPushBranch({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          commitMessage:\n            description ??\n            config.getOptionalString('scaffolder.defaultCommitMessage') ??\n            '',\n          gitAuthorInfo,\n          branch: sourceBranch,\n        });\n      }\n\n      const pullRequestUrl = await createPullRequest({\n        project,\n        repo,\n        title,\n        description,\n        toRef,\n        fromRef,\n        reviewers,\n        authorization,\n        apiBaseUrl,\n      });\n\n      ctx.output('pullRequestUrl', pullRequestUrl);\n    },\n  });\n}\n"],"names":["fetch","createTemplateAction","examples","parseRepoUrl","InputError","getBitbucketServerRequestOptions","getRepoSourceDirectory","cloneRepo","createGitBranch","fs","addFiles","commitAndPushBranch"],"mappings":"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"}