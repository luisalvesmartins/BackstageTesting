{"version":3,"file":"gitlabRepoPush.cjs.js","sources":["../../src/actions/gitlabRepoPush.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { Types } from '@gitbeaker/core';\nimport path from 'path';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { InputError } from '@backstage/errors';\nimport { resolveSafeChildPath } from '@backstage/backend-plugin-api';\nimport { createGitlabApi } from './helpers';\nimport { examples } from './gitlabRepoPush.examples';\n\n/**\n * Create a new action that commits into a gitlab repository.\n *\n * @public\n */\nexport const createGitlabRepoPushAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    branchName: string;\n    commitMessage: string;\n    sourcePath?: string;\n    targetPath?: string;\n    token?: string;\n    commitAction?: 'create' | 'delete' | 'update';\n  }>({\n    id: 'gitlab:repo:push',\n    examples,\n    schema: {\n      input: {\n        required: ['repoUrl', 'branchName', 'commitMessage'],\n        type: 'object',\n        properties: {\n          repoUrl: {\n            type: 'string',\n            title: 'Repository Location',\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          },\n          branchName: {\n            type: 'string',\n            title: 'Source Branch Name',\n            description: 'The branch name for the commit',\n          },\n          commitMessage: {\n            type: 'string',\n            title: 'Commit Message',\n            description: `The commit message`,\n          },\n          sourcePath: {\n            type: 'string',\n            title: 'Working Subdirectory',\n            description:\n              'Subdirectory of working directory to copy changes from',\n          },\n          targetPath: {\n            type: 'string',\n            title: 'Repository Subdirectory',\n            description: 'Subdirectory of repository to apply changes to',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitLab',\n          },\n          commitAction: {\n            title: 'Commit action',\n            type: 'string',\n            enum: ['create', 'update', 'delete'],\n            description:\n              'The action to be used for git commit. Defaults to create.',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          projectid: {\n            title: 'Gitlab Project id/Name(slug)',\n            type: 'string',\n          },\n          projectPath: {\n            title: 'Gitlab Project path',\n            type: 'string',\n          },\n          commitHash: {\n            title: 'The git commit hash of the commit',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        branchName,\n        repoUrl,\n        targetPath,\n        sourcePath,\n        token,\n        commitAction,\n      } = ctx.input;\n\n      const { owner, repo, project } = parseRepoUrl(repoUrl, integrations);\n      const repoID = project ? project : `${owner}/${repo}`;\n\n      const api = createGitlabApi({\n        integrations,\n        token,\n        repoUrl,\n      });\n\n      let fileRoot: string;\n      if (sourcePath) {\n        fileRoot = resolveSafeChildPath(ctx.workspacePath, sourcePath);\n      } else {\n        fileRoot = ctx.workspacePath;\n      }\n\n      const fileContents = await serializeDirectoryContents(fileRoot, {\n        gitignore: true,\n      });\n\n      const actions: Types.CommitAction[] = fileContents.map(file => ({\n        action: commitAction ?? 'create',\n        filePath: targetPath\n          ? path.posix.join(targetPath, file.path)\n          : file.path,\n        encoding: 'base64',\n        content: file.content.toString('base64'),\n        execute_filemode: file.executable,\n      }));\n\n      let branchExists = false;\n      try {\n        await api.Branches.show(repoID, branchName);\n        branchExists = true;\n      } catch (e: any) {\n        if (e.response?.statusCode !== 404) {\n          throw new InputError(\n            `Failed to check status of branch '${branchName}'. Please make sure that branch already exists or Backstage has permissions to create one. ${e}`,\n          );\n        }\n      }\n\n      if (!branchExists) {\n        // create a branch using the default branch as ref\n        try {\n          const projects = await api.Projects.show(repoID);\n          const { default_branch: defaultBranch } = projects;\n          await api.Branches.create(repoID, branchName, String(defaultBranch));\n        } catch (e) {\n          throw new InputError(\n            `The branch '${branchName}' was not found and creation failed with error. Please make sure that branch already exists or Backstage has permissions to create one. ${e}`,\n          );\n        }\n      }\n\n      try {\n        const commit = await api.Commits.create(\n          repoID,\n          branchName,\n          ctx.input.commitMessage,\n          actions,\n        );\n        ctx.output('projectid', repoID);\n        ctx.output('projectPath', repoID);\n        ctx.output('commitHash', commit.id);\n      } catch (e) {\n        throw new InputError(\n          `Committing the changes to ${branchName} failed. Please check that none of the files created by the template already exists. ${e}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","parseRepoUrl","createGitlabApi","resolveSafeChildPath","serializeDirectoryContents","path","InputError"],"mappings":"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"}