{"version":3,"file":"gitlabProjectDeployTokenCreate.cjs.js","sources":["../../src/actions/gitlabProjectDeployTokenCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { DeployTokenScope } from '@gitbeaker/core/dist/types/templates/ResourceDeployTokens';\nimport { Gitlab } from '@gitbeaker/node';\nimport { z } from 'zod';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { getToken } from '../util';\nimport { examples } from './gitlabProjectDeployTokenCreate.examples';\n\n/**\n * Creates a `gitlab:projectDeployToken:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabProjectDeployTokenAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectDeployToken:create',\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(\n        z.object({\n          projectId: z.union([z.number(), z.string()], {\n            description: 'Project ID',\n          }),\n          name: z.string({ description: 'Deploy Token Name' }),\n          username: z\n            .string({ description: 'Deploy Token Username' })\n            .optional(),\n          scopes: z.array(z.string(), { description: 'Scopes' }).optional(),\n        }),\n      ),\n      output: z.object({\n        deploy_token: z.string({ description: 'Deploy Token' }),\n        user: z.string({ description: 'User' }),\n      }),\n    },\n    async handler(ctx) {\n      ctx.logger.info(`Creating Token for Project \"${ctx.input.projectId}\"`);\n      const { projectId, name, username, scopes } = ctx.input;\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      const api = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        token: token,\n      });\n\n      const deployToken = await api.ProjectDeployTokens.add(\n        projectId,\n        name,\n        scopes as DeployTokenScope[],\n        {\n          username: username,\n        },\n      );\n\n      if (!deployToken.hasOwnProperty('token')) {\n        throw new InputError(`No deploy_token given from gitlab instance`);\n      }\n\n      ctx.output('deploy_token', deployToken.token as string);\n      ctx.output('user', deployToken.username);\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","commonGitlabConfig","z","getToken","Gitlab","InputError"],"mappings":";;;;;;;;;;AAgCa,MAAA,oCAAA,GAAuC,CAAC,OAE/C,KAAA;AACJ,EAAM,MAAA,EAAE,cAAiB,GAAA,OAAA,CAAA;AACzB,EAAA,OAAOA,yCAAqB,CAAA;AAAA,IAC1B,EAAI,EAAA,kCAAA;AAAA,cACJC,gDAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,OAAOC,0BAAmB,CAAA,KAAA;AAAA,QACxBC,MAAE,MAAO,CAAA;AAAA,UACP,SAAA,EAAWA,KAAE,CAAA,KAAA,CAAM,CAACA,KAAA,CAAE,QAAU,EAAAA,KAAA,CAAE,MAAO,EAAC,CAAG,EAAA;AAAA,YAC3C,WAAa,EAAA,YAAA;AAAA,WACd,CAAA;AAAA,UACD,MAAMA,KAAE,CAAA,MAAA,CAAO,EAAE,WAAA,EAAa,qBAAqB,CAAA;AAAA,UACnD,QAAA,EAAUA,MACP,MAAO,CAAA,EAAE,aAAa,uBAAwB,EAAC,EAC/C,QAAS,EAAA;AAAA,UACZ,MAAA,EAAQA,KAAE,CAAA,KAAA,CAAMA,KAAE,CAAA,MAAA,EAAU,EAAA,EAAE,WAAa,EAAA,QAAA,EAAU,CAAA,CAAE,QAAS,EAAA;AAAA,SACjE,CAAA;AAAA,OACH;AAAA,MACA,MAAA,EAAQA,MAAE,MAAO,CAAA;AAAA,QACf,cAAcA,KAAE,CAAA,MAAA,CAAO,EAAE,WAAA,EAAa,gBAAgB,CAAA;AAAA,QACtD,MAAMA,KAAE,CAAA,MAAA,CAAO,EAAE,WAAA,EAAa,QAAQ,CAAA;AAAA,OACvC,CAAA;AAAA,KACH;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAA,GAAA,CAAI,OAAO,IAAK,CAAA,CAAA,4BAAA,EAA+B,GAAI,CAAA,KAAA,CAAM,SAAS,CAAG,CAAA,CAAA,CAAA,CAAA;AACrE,MAAA,MAAM,EAAE,SAAW,EAAA,IAAA,EAAM,QAAU,EAAA,MAAA,KAAW,GAAI,CAAA,KAAA,CAAA;AAClD,MAAA,MAAM,EAAE,KAAO,EAAA,iBAAA,KAAsBC,aAAS,CAAA,GAAA,CAAI,OAAO,YAAY,CAAA,CAAA;AAErE,MAAM,MAAA,GAAA,GAAM,IAAIC,WAAO,CAAA;AAAA,QACrB,IAAA,EAAM,kBAAkB,MAAO,CAAA,OAAA;AAAA,QAC/B,KAAA;AAAA,OACD,CAAA,CAAA;AAED,MAAM,MAAA,WAAA,GAAc,MAAM,GAAA,CAAI,mBAAoB,CAAA,GAAA;AAAA,QAChD,SAAA;AAAA,QACA,IAAA;AAAA,QACA,MAAA;AAAA,QACA;AAAA,UACE,QAAA;AAAA,SACF;AAAA,OACF,CAAA;AAEA,MAAA,IAAI,CAAC,WAAA,CAAY,cAAe,CAAA,OAAO,CAAG,EAAA;AACxC,QAAM,MAAA,IAAIC,kBAAW,CAA4C,0CAAA,CAAA,CAAA,CAAA;AAAA,OACnE;AAEA,MAAI,GAAA,CAAA,MAAA,CAAO,cAAgB,EAAA,WAAA,CAAY,KAAe,CAAA,CAAA;AACtD,MAAI,GAAA,CAAA,MAAA,CAAO,MAAQ,EAAA,WAAA,CAAY,QAAQ,CAAA,CAAA;AAAA,KACzC;AAAA,GACD,CAAA,CAAA;AACH;;;;"}